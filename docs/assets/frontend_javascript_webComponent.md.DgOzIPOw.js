import{_ as e,c as a,o,V as t}from"./chunks/framework.CsbsVE7l.js";const b=JSON.parse('{"title":"webComponent","description":"","frontmatter":{"outline":"deep","editLink":false},"headers":[],"relativePath":"frontend/javascript/webComponent.md","filePath":"frontend/javascript/webComponent.md","lastUpdated":1735545563000}'),r={name:"frontend/javascript/webComponent.md"},l=t('<h1 id="webcomponent" tabindex="-1">webComponent <a class="header-anchor" href="#webcomponent" aria-label="Permalink to &quot;webComponent&quot;">​</a></h1><h2 id="_1-前言" tabindex="-1">1 前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to &quot;1 前言&quot;">​</a></h2><p>Web Component 是一套不同的技术，允许你创建可重用的定制元素（它们的功能封装在你的代码之外）并且在你的 web 应用中使用它们。</p><p>Web Components 旨在解决这些问题 — 它由三项主要技术组成，它们可以一起使用来创建封装功能的定制元素，可以在你喜欢的任何地方重用，不必担心代码冲突。</p><h2 id="_2-主要的特点" tabindex="-1">2 主要的特点 <a class="header-anchor" href="#_2-主要的特点" aria-label="Permalink to &quot;2 主要的特点&quot;">​</a></h2><ul><li><strong>Custom element（自定义元素）</strong>：一组 JavaScript API，允许你定义 custom elements 及其行为，然后可以在你的用户界面中按照需要使用它们。</li><li><strong>Shadow DOM（影子 DOM）</strong>：一组 JavaScript API，用于将封装的“影子”DOM 树附加到元素（与主文档 DOM 分开呈现）并控制其关联的功能。通过这种方式，你可以保持元素的功能私有，这样它们就可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突。</li><li><strong>HTML template（HTML 模板）：</strong> [` 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/slot" target="_blank" rel="noreferrer">``</a> 元素使你可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。</li></ul><h2 id="_3-相关知识点的依赖" tabindex="-1">3 相关知识点的依赖 <a class="header-anchor" href="#_3-相关知识点的依赖" aria-label="Permalink to &quot;3 相关知识点的依赖&quot;">​</a></h2><h3 id="_3-1shadow-dom" tabindex="-1">3.1<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components/Using_shadow_DOM" target="_blank" rel="noreferrer">shadow DOM</a> <a class="header-anchor" href="#_3-1shadow-dom" aria-label="Permalink to &quot;3.1[shadow DOM](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components/Using_shadow_DOM)&quot;">​</a></h3><p>自定义元素的一个重要方面是封装，因为自定义元素从定义上来说是一种可重用功能：它可以被放置在任何网页中，并且期望它能够正常工作。因此，很重要的一点是，运行在页面中的代码不应该能够通过修改自定义元素的内部实现而意外地破坏它。影子 DOM（Shadow DOM）允许你将一个 DOM 树附加到一个元素上，并且使该树的内部对于在页面中运行的 JavaScript 和 CSS 是隐藏的。</p><h3 id="_3-2-css-封装" tabindex="-1">3.2 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components/Using_shadow_DOM#css_%E5%B0%81%E8%A3%85" target="_blank" rel="noreferrer">CSS 封装</a> <a class="header-anchor" href="#_3-2-css-封装" aria-label="Permalink to &quot;3.2 [CSS 封装](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components/Using_shadow_DOM#css_封装)&quot;">​</a></h3><p>主要是方便 <strong>shadow DOM</strong>中使用样式，主要有以下两种方式</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components/Using_shadow_DOM#%E5%8F%AF%E6%9E%84%E9%80%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8" target="_blank" rel="noreferrer">编程式</a>: 通过构建一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CSSStyleSheet" target="_blank" rel="noreferrer">CSSStyleSheet</a> 对象并将其附加到影子根。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components/Using_shadow_DOM#%E5%9C%A8_template_%E5%A3%B0%E6%98%8E%E4%B8%AD%E6%B7%BB%E5%8A%A0_style_%E5%85%83%E7%B4%A0" target="_blank" rel="noreferrer">函数式</a> :通过在一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/template" target="_blank" rel="noreferrer">template</a>元素的声明中添加一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/style" target="_blank" rel="noreferrer">style</a>元素。</li></ul><h3 id="_3-3-有的时候会使用到自定义事件" tabindex="-1">3.3 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CustomEvent" target="_blank" rel="noreferrer">有的时候会使用到自定义事件</a> <a class="header-anchor" href="#_3-3-有的时候会使用到自定义事件" aria-label="Permalink to &quot;3.3 [有的时候会使用到自定义事件](https://developer.mozilla.org/zh-CN/docs/Web/API/CustomEvent)&quot;">​</a></h3><p><strong><code>CustomEvent</code></strong> 接口表示由应用程序为任何目的初始化的事件。。</p><h5 id="建议-javascript-文件使用无-bom-的-utf-8-编码。" tabindex="-1">[建议] <code>JavaScript</code> 文件使用无 <code>BOM</code> 的 <code>UTF-8</code> 编码。 <a class="header-anchor" href="#建议-javascript-文件使用无-bom-的-utf-8-编码。" aria-label="Permalink to &quot;[建议] `JavaScript` 文件使用无 `BOM` 的 `UTF-8` 编码。&quot;">​</a></h5><p>解释：</p><p>UTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。</p><h5 id="建议-在文件结尾处-保留一个空行。" tabindex="-1">[建议] 在文件结尾处，保留一个空行。 <a class="header-anchor" href="#建议-在文件结尾处-保留一个空行。" aria-label="Permalink to &quot;[建议] 在文件结尾处，保留一个空行。&quot;">​</a></h5><h2 id="_4-个人理解及应用场景" tabindex="-1">4. 个人理解及应用场景 <a class="header-anchor" href="#_4-个人理解及应用场景" aria-label="Permalink to &quot;4. 个人理解及应用场景&quot;">​</a></h2><ul><li>主要是封装自定义标签，跨前端组件使用，相当于各个项目中的非业务的公共组件，适配多个前端框架，需要使用的组件对原生的** web component **完美支持。</li><li>尝试新技术，团队的人大部分都想用，或者在其他新的项目，访问量低的页面中使用。</li><li>加深对框架的理解，可以与vue中的slot做比较，可以与微信小程序中的slot做比较，加深对插件的理解。</li></ul><h2 id="_5-其他" tabindex="-1">5. 其他 <a class="header-anchor" href="#_5-其他" aria-label="Permalink to &quot;5. 其他&quot;">​</a></h2><ul><li>目前 <strong>vue</strong> 完全适配原生的<strong>web component</strong>方案, <a href="https://cn.vuejs.org/guide/extras/web-components" target="_blank" rel="noreferrer">Vue 与 Web Components</a></li></ul><h3 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components" target="_blank" rel="noreferrer">Web_components</a><a href="https://github.com/mdn/web-components-examples" target="_blank" rel="noreferrer">web-components-examples</a></p>',24),n=[l];function s(h,i,d,p,c,m){return o(),a("div",null,n)}const u=e(r,[["render",s]]);export{b as __pageData,u as default};
