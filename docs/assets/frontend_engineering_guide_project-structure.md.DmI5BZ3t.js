import{_ as a,c as s,o as n,V as e}from"./chunks/framework.CsbsVE7l.js";const m=JSON.parse('{"title":"项目目录结构规范","description":"前端项目目录结构规范指南","frontmatter":{"title":"项目目录结构规范","description":"前端项目目录结构规范指南"},"headers":[],"relativePath":"frontend/engineering/guide/project-structure.md","filePath":"frontend/engineering/guide/project-structure.md","lastUpdated":1748791719000}'),l={name:"frontend/engineering/guide/project-structure.md"},i=e(`<h1 id="项目目录结构规范" tabindex="-1">项目目录结构规范 <a class="header-anchor" href="#项目目录结构规范" aria-label="Permalink to &quot;项目目录结构规范&quot;">​</a></h1><h2 id="基础目录结构" tabindex="-1">基础目录结构 <a class="header-anchor" href="#基础目录结构" aria-label="Permalink to &quot;基础目录结构&quot;">​</a></h2><h3 id="根目录" tabindex="-1">根目录 <a class="header-anchor" href="#根目录" aria-label="Permalink to &quot;根目录&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>├── src/                # 源代码目录</span></span>
<span class="line"><span>├── public/            # 静态资源目录</span></span>
<span class="line"><span>├── tests/             # 测试文件目录</span></span>
<span class="line"><span>├── docs/              # 项目文档目录</span></span>
<span class="line"><span>├── scripts/           # 脚本文件目录</span></span>
<span class="line"><span>├── config/            # 配置文件目录</span></span>
<span class="line"><span>└── package.json       # 项目配置文件</span></span></code></pre></div><h3 id="src-目录" tabindex="-1">src 目录 <a class="header-anchor" href="#src-目录" aria-label="Permalink to &quot;src 目录&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>src/</span></span>
<span class="line"><span>├── assets/           # 项目资源文件</span></span>
<span class="line"><span>│   ├── images/      # 图片资源</span></span>
<span class="line"><span>│   ├── styles/      # 样式文件</span></span>
<span class="line"><span>│   └── fonts/       # 字体文件</span></span>
<span class="line"><span>├── components/       # 公共组件</span></span>
<span class="line"><span>├── views/           # 页面组件</span></span>
<span class="line"><span>├── router/          # 路由配置</span></span>
<span class="line"><span>├── store/           # 状态管理</span></span>
<span class="line"><span>├── utils/           # 工具函数</span></span>
<span class="line"><span>├── api/             # API 接口</span></span>
<span class="line"><span>├── constants/       # 常量定义</span></span>
<span class="line"><span>└── App.vue          # 根组件</span></span></code></pre></div><h2 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-label="Permalink to &quot;命名规范&quot;">​</a></h2><h3 id="目录命名" tabindex="-1">目录命名 <a class="header-anchor" href="#目录命名" aria-label="Permalink to &quot;目录命名&quot;">​</a></h3><ol><li>使用小写字母</li><li>多个单词用连字符（-）连接</li><li>语义化命名</li></ol><h3 id="文件命名" tabindex="-1">文件命名 <a class="header-anchor" href="#文件命名" aria-label="Permalink to &quot;文件命名&quot;">​</a></h3><ol><li>组件文件使用 PascalCase</li><li>工具文件使用 camelCase</li><li>样式文件使用 kebab-case</li></ol><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><h3 id="目录组织" tabindex="-1">目录组织 <a class="header-anchor" href="#目录组织" aria-label="Permalink to &quot;目录组织&quot;">​</a></h3><ol><li>按功能模块划分</li><li>保持目录层级清晰</li><li>避免过深的目录嵌套</li></ol><h3 id="文件组织" tabindex="-1">文件组织 <a class="header-anchor" href="#文件组织" aria-label="Permalink to &quot;文件组织&quot;">​</a></h3><ol><li>相关文件放在同一目录</li><li>公共资源集中管理</li><li>配置文件统一存放</li></ol><h3 id="代码组织" tabindex="-1">代码组织 <a class="header-anchor" href="#代码组织" aria-label="Permalink to &quot;代码组织&quot;">​</a></h3><ol><li>遵循单一职责原则</li><li>保持文件结构清晰</li><li>合理使用模块化</li></ol>`,18),t=[i];function p(o,r,c,h,d,u){return n(),s("div",null,t)}const _=a(l,[["render",p]]);export{m as __pageData,_ as default};
