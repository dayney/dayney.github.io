import{_ as a,c as e,o as i,V as l}from"./chunks/framework.CsbsVE7l.js";const b=JSON.parse('{"title":"状态管理规范","description":"","frontmatter":{"outline":"deep","editLink":false},"headers":[],"relativePath":"frontend/index/javascript/vue2/state-management.md","filePath":"frontend/index/javascript/vue2/state-management.md","lastUpdated":1748791719000}'),t={name:"frontend/index/javascript/vue2/state-management.md"},r=l('<h1 id="状态管理规范" tabindex="-1">状态管理规范 <a class="header-anchor" href="#状态管理规范" aria-label="Permalink to &quot;状态管理规范&quot;">​</a></h1><h2 id="_1-vuex-使用规范" tabindex="-1">1 Vuex 使用规范 <a class="header-anchor" href="#_1-vuex-使用规范" aria-label="Permalink to &quot;1 Vuex 使用规范&quot;">​</a></h2><h3 id="_1-1-store-结构" tabindex="-1">1.1 Store 结构 <a class="header-anchor" href="#_1-1-store-结构" aria-label="Permalink to &quot;1.1 Store 结构&quot;">​</a></h3><ul><li>按模块拆分 store</li><li>每个模块包含 state、mutations、actions、getters</li><li>使用命名空间避免命名冲突</li><li>保持模块的独立性</li></ul><h3 id="_1-2-state-管理" tabindex="-1">1.2 State 管理 <a class="header-anchor" href="#_1-2-state-管理" aria-label="Permalink to &quot;1.2 State 管理&quot;">​</a></h3><ul><li>使用 mapState 辅助函数</li><li>避免直接修改 state</li><li>使用 getters 派生状态</li><li>保持 state 的扁平化</li></ul><h3 id="_1-3-mutations" tabindex="-1">1.3 Mutations <a class="header-anchor" href="#_1-3-mutations" aria-label="Permalink to &quot;1.3 Mutations&quot;">​</a></h3><ul><li>必须是同步函数</li><li>使用常量作为 mutation 类型</li><li>mutation 应该只做状态修改</li><li>避免在 mutation 中进行异步操作</li></ul><h3 id="_1-4-actions" tabindex="-1">1.4 Actions <a class="header-anchor" href="#_1-4-actions" aria-label="Permalink to &quot;1.4 Actions&quot;">​</a></h3><ul><li>可以包含异步操作</li><li>通过 commit 提交 mutation</li><li>使用 mapActions 辅助函数</li><li>处理异步操作的错误情况</li></ul><h3 id="_1-5-getters" tabindex="-1">1.5 Getters <a class="header-anchor" href="#_1-5-getters" aria-label="Permalink to &quot;1.5 Getters&quot;">​</a></h3><ul><li>用于派生状态</li><li>可以接收其他 getter 作为第二个参数</li><li>使用 mapGetters 辅助函数</li><li>避免在 getter 中修改状态</li></ul><h2 id="_2-组件状态管理" tabindex="-1">2 组件状态管理 <a class="header-anchor" href="#_2-组件状态管理" aria-label="Permalink to &quot;2 组件状态管理&quot;">​</a></h2><h3 id="_2-1-数据流向" tabindex="-1">2.1 数据流向 <a class="header-anchor" href="#_2-1-数据流向" aria-label="Permalink to &quot;2.1 数据流向&quot;">​</a></h3><ul><li>单向数据流</li><li>父组件通过 props 向下传递数据</li><li>子组件通过事件向上传递数据</li><li>避免组件间的直接数据修改</li></ul><h3 id="_2-2-props-和-events" tabindex="-1">2.2 Props 和 Events <a class="header-anchor" href="#_2-2-props-和-events" aria-label="Permalink to &quot;2.2 Props 和 Events&quot;">​</a></h3><ul><li>Props 应该是只读的</li><li>使用事件通知父组件</li><li>使用 v-model 进行双向绑定</li><li>合理使用 .sync 修饰符</li></ul><h3 id="_2-3-计算属性" tabindex="-1">2.3 计算属性 <a class="header-anchor" href="#_2-3-计算属性" aria-label="Permalink to &quot;2.3 计算属性&quot;">​</a></h3><ul><li>使用计算属性缓存结果</li><li>避免在计算属性中修改数据</li><li>合理使用 getter 和 setter</li><li>避免计算属性中的复杂逻辑</li></ul><h3 id="_2-4-侦听器" tabindex="-1">2.4 侦听器 <a class="header-anchor" href="#_2-4-侦听器" aria-label="Permalink to &quot;2.4 侦听器&quot;">​</a></h3><ul><li>使用 watch 监听数据变化</li><li>合理使用 deep 和 immediate 选项</li><li>避免在 watch 中修改被监听的数据</li><li>使用 watch 处理异步操作</li></ul><h2 id="_3-最佳实践" tabindex="-1">3 最佳实践 <a class="header-anchor" href="#_3-最佳实践" aria-label="Permalink to &quot;3 最佳实践&quot;">​</a></h2><h3 id="_3-1-状态设计" tabindex="-1">3.1 状态设计 <a class="header-anchor" href="#_3-1-状态设计" aria-label="Permalink to &quot;3.1 状态设计&quot;">​</a></h3><ul><li>保持状态的最小化</li><li>避免冗余的状态</li><li>使用计算属性派生状态</li><li>合理使用本地状态和全局状态</li></ul><h3 id="_3-2-性能优化" tabindex="-1">3.2 性能优化 <a class="header-anchor" href="#_3-2-性能优化" aria-label="Permalink to &quot;3.2 性能优化&quot;">​</a></h3><ul><li>使用 Vuex 的严格模式</li><li>合理使用 mapState、mapGetters 等辅助函数</li><li>避免不必要的状态更新</li><li>使用 Vuex 的插件机制</li></ul><h3 id="_3-3-错误处理" tabindex="-1">3.3 错误处理 <a class="header-anchor" href="#_3-3-错误处理" aria-label="Permalink to &quot;3.3 错误处理&quot;">​</a></h3><ul><li>统一处理异步操作的错误</li><li>使用 try-catch 捕获异常</li><li>提供友好的错误提示</li><li>记录错误日志</li></ul><h3 id="_3-4-调试" tabindex="-1">3.4 调试 <a class="header-anchor" href="#_3-4-调试" aria-label="Permalink to &quot;3.4 调试&quot;">​</a></h3><ul><li>使用 Vue Devtools</li><li>合理使用 Vuex 的日志插件</li><li>在开发环境中启用严格模式</li><li>使用 Vuex 的调试工具</li></ul>',30),o=[r];function n(s,h,u,d,c,_){return i(),e("div",null,o)}const q=a(t,[["render",n]]);export{b as __pageData,q as default};
