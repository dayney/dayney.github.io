import{_ as l,c as a,o as e,V as i}from"./chunks/framework.CsbsVE7l.js";const m=JSON.parse('{"title":"Vue2 组件结构规范","description":"","frontmatter":{"outline":"deep","editLink":false},"headers":[],"relativePath":"frontend/index/javascript/vue2/component-structure.md","filePath":"frontend/index/javascript/vue2/component-structure.md","lastUpdated":1748791719000}'),t={name:"frontend/index/javascript/vue2/component-structure.md"},o=i('<h1 id="vue2-组件结构规范" tabindex="-1">Vue2 组件结构规范 <a class="header-anchor" href="#vue2-组件结构规范" aria-label="Permalink to &quot;Vue2 组件结构规范&quot;">​</a></h1><h2 id="_1-组件命名" tabindex="-1">1 组件命名 <a class="header-anchor" href="#_1-组件命名" aria-label="Permalink to &quot;1 组件命名&quot;">​</a></h2><ul><li>组件名应该始终是多个单词的，根组件 App 除外</li><li>组件名应该以高级别的单词开头，以描述性的修饰词结尾</li><li>组件名应该始终是 PascalCase 的</li><li>基础组件名应该以一个特定的前缀开头，比如 Base、App 或 V</li></ul><h2 id="_2-组件结构" tabindex="-1">2 组件结构 <a class="header-anchor" href="#_2-组件结构" aria-label="Permalink to &quot;2 组件结构&quot;">​</a></h2><ul><li>组件选项的顺序应该保持一致</li><li>组件选项的顺序应该是： <ol><li>name</li><li>components</li><li>props</li><li>data</li><li>computed</li><li>watch</li><li>created</li><li>mounted</li><li>methods</li><li>template</li></ol></li></ul><h2 id="_3-props-定义" tabindex="-1">3 Props 定义 <a class="header-anchor" href="#_3-props-定义" aria-label="Permalink to &quot;3 Props 定义&quot;">​</a></h2><ul><li>Props 定义应该尽可能详细，至少需要指定其类型</li><li>必须使用 camelCase 命名</li><li>必须指定类型</li><li>必须加上注释，说明其用途</li><li>必须加上 validator 进行验证</li></ul><h2 id="_4-组件通信" tabindex="-1">4 组件通信 <a class="header-anchor" href="#_4-组件通信" aria-label="Permalink to &quot;4 组件通信&quot;">​</a></h2><ul><li>优先使用 props 和 events 进行父子组件通信</li><li>使用 Vuex 进行全局状态管理</li><li>使用 EventBus 进行跨组件通信（谨慎使用）</li></ul><h2 id="_5-模板规范" tabindex="-1">5 模板规范 <a class="header-anchor" href="#_5-模板规范" aria-label="Permalink to &quot;5 模板规范&quot;">​</a></h2><h3 id="_5-1-模板语法" tabindex="-1">5.1 模板语法 <a class="header-anchor" href="#_5-1-模板语法" aria-label="Permalink to &quot;5.1 模板语法&quot;">​</a></h3><ul><li>使用 v-for 时必须加上 key</li><li>避免 v-if 和 v-for 同时使用</li><li>使用 v-show 代替 v-if 进行频繁切换</li><li>使用 v-once 优化静态内容（只渲染一次，后续更新时跳过）</li></ul><h3 id="_5-2-样式规范" tabindex="-1">5.2 样式规范 <a class="header-anchor" href="#_5-2-样式规范" aria-label="Permalink to &quot;5.2 样式规范&quot;">​</a></h3><ul><li>使用 scoped 属性</li><li>使用 BEM 命名规范</li><li>使用 CSS 预处理器（如 SCSS）</li><li>避免使用 !important</li></ul><h2 id="_6-性能优化" tabindex="-1">6 性能优化 <a class="header-anchor" href="#_6-性能优化" aria-label="Permalink to &quot;6 性能优化&quot;">​</a></h2><h3 id="_6-1-代码分割" tabindex="-1">6.1 代码分割 <a class="header-anchor" href="#_6-1-代码分割" aria-label="Permalink to &quot;6.1 代码分割&quot;">​</a></h3><ul><li>使用异步组件</li><li>使用路由懒加载</li><li>合理使用 keep-alive</li><li>使用 v-once 优化静态内容</li></ul><h3 id="_6-2-数据处理" tabindex="-1">6.2 数据处理 <a class="header-anchor" href="#_6-2-数据处理" aria-label="Permalink to &quot;6.2 数据处理&quot;">​</a></h3><ul><li>合理使用计算属性</li><li>避免在模板中使用复杂表达式</li><li>使用 v-once 优化静态内容</li><li>使用 Object.freeze() 冻结不需要响应式的数据</li></ul>',19),r=[o];function n(s,h,u,c,d,_){return e(),a("div",null,r)}const f=l(t,[["render",n]]);export{m as __pageData,f as default};
