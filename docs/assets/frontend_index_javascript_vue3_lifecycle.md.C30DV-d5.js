import{_ as e,c as a,o as l,V as i}from"./chunks/framework.CsbsVE7l.js";const p=JSON.parse('{"title":"Vue3 生命周期使用规范","description":"","frontmatter":{"outline":"deep","editLink":false},"headers":[],"relativePath":"frontend/index/javascript/vue3/lifecycle.md","filePath":"frontend/index/javascript/vue3/lifecycle.md","lastUpdated":1748791719000}'),t={name:"frontend/index/javascript/vue3/lifecycle.md"},o=i('<h1 id="vue3-生命周期使用规范" tabindex="-1">Vue3 生命周期使用规范 <a class="header-anchor" href="#vue3-生命周期使用规范" aria-label="Permalink to &quot;Vue3 生命周期使用规范&quot;">​</a></h1><h2 id="_1-生命周期钩子" tabindex="-1">1 生命周期钩子 <a class="header-anchor" href="#_1-生命周期钩子" aria-label="Permalink to &quot;1 生命周期钩子&quot;">​</a></h2><h3 id="_1-1-创建阶段" tabindex="-1">1.1 创建阶段 <a class="header-anchor" href="#_1-1-创建阶段" aria-label="Permalink to &quot;1.1 创建阶段&quot;">​</a></h3><ul><li>setup：在组件创建之前执行，是组合式 API 的入口点</li><li>onBeforeMount：在组件挂载到 DOM 之前调用</li><li>onMounted：在组件挂载到 DOM 后调用</li></ul><h3 id="_1-2-更新阶段" tabindex="-1">1.2 更新阶段 <a class="header-anchor" href="#_1-2-更新阶段" aria-label="Permalink to &quot;1.2 更新阶段&quot;">​</a></h3><ul><li>onBeforeUpdate：在组件更新之前调用</li><li>onUpdated：在组件更新之后调用</li></ul><h3 id="_1-3-卸载阶段" tabindex="-1">1.3 卸载阶段 <a class="header-anchor" href="#_1-3-卸载阶段" aria-label="Permalink to &quot;1.3 卸载阶段&quot;">​</a></h3><ul><li>onBeforeUnmount：在组件卸载之前调用</li><li>onUnmounted：在组件卸载之后调用</li></ul><h3 id="_1-4-其他钩子" tabindex="-1">1.4 其他钩子 <a class="header-anchor" href="#_1-4-其他钩子" aria-label="Permalink to &quot;1.4 其他钩子&quot;">​</a></h3><ul><li>onActivated：在 keep-alive 缓存的组件被激活时调用</li><li>onDeactivated：在 keep-alive 缓存的组件被停用时调用</li><li>onErrorCaptured：在捕获到后代组件的错误时调用</li></ul><h2 id="_2-最佳实践" tabindex="-1">2 最佳实践 <a class="header-anchor" href="#_2-最佳实践" aria-label="Permalink to &quot;2 最佳实践&quot;">​</a></h2><h3 id="_2-1-数据初始化" tabindex="-1">2.1 数据初始化 <a class="header-anchor" href="#_2-1-数据初始化" aria-label="Permalink to &quot;2.1 数据初始化&quot;">​</a></h3><ul><li>在 setup 中进行数据的初始化</li><li>使用 ref 和 reactive 创建响应式数据</li><li>在 setup 中发起异步请求</li><li>使用 async setup 处理异步初始化</li></ul><h3 id="_2-2-dom-操作" tabindex="-1">2.2 DOM 操作 <a class="header-anchor" href="#_2-2-dom-操作" aria-label="Permalink to &quot;2.2 DOM 操作&quot;">​</a></h3><ul><li>在 onMounted 钩子中进行 DOM 操作</li><li>使用 nextTick 确保 DOM 更新完成</li><li>使用 template refs 访问 DOM 元素</li><li>避免在 setup 中直接操作 DOM</li></ul><h3 id="_2-3-资源清理" tabindex="-1">2.3 资源清理 <a class="header-anchor" href="#_2-3-资源清理" aria-label="Permalink to &quot;2.3 资源清理&quot;">​</a></h3><ul><li>在 onBeforeUnmount 中清理定时器</li><li>在 onBeforeUnmount 中解绑事件监听</li><li>在 onBeforeUnmount 中取消未完成的请求</li><li>使用 onUnmounted 进行最终的清理工作</li></ul><h3 id="_2-4-性能优化" tabindex="-1">2.4 性能优化 <a class="header-anchor" href="#_2-4-性能优化" aria-label="Permalink to &quot;2.4 性能优化&quot;">​</a></h3><ul><li>合理使用 onActivated 和 onDeactivated 钩子</li><li>使用 keep-alive 缓存组件状态</li><li>避免在 onUpdated 钩子中修改数据</li><li>使用 shallowRef 和 shallowReactive 优化性能</li></ul><h2 id="_3-常见问题" tabindex="-1">3 常见问题 <a class="header-anchor" href="#_3-常见问题" aria-label="Permalink to &quot;3 常见问题&quot;">​</a></h2><h3 id="_3-1-异步操作" tabindex="-1">3.1 异步操作 <a class="header-anchor" href="#_3-1-异步操作" aria-label="Permalink to &quot;3.1 异步操作&quot;">​</a></h3><ul><li>在 setup 中发起异步请求</li><li>使用 async/await 处理异步操作</li><li>处理异步操作的错误情况</li><li>使用 Suspense 处理异步组件</li></ul><h3 id="_3-2-父子组件生命周期" tabindex="-1">3.2 父子组件生命周期 <a class="header-anchor" href="#_3-2-父子组件生命周期" aria-label="Permalink to &quot;3.2 父子组件生命周期&quot;">​</a></h3><ul><li>父组件 setup</li><li>父组件 onBeforeMount</li><li>子组件 setup</li><li>子组件 onBeforeMount</li><li>子组件 onMounted</li><li>父组件 onMounted</li></ul><h3 id="_3-3-组件更新" tabindex="-1">3.3 组件更新 <a class="header-anchor" href="#_3-3-组件更新" aria-label="Permalink to &quot;3.3 组件更新&quot;">​</a></h3><ul><li>父组件 onBeforeUpdate</li><li>子组件 onBeforeUpdate</li><li>子组件 onUpdated</li><li>父组件 onUpdated</li></ul>',26),n=[o];function r(d,u,h,s,c,_){return l(),a("div",null,n)}const m=e(t,[["render",r]]);export{p as __pageData,m as default};
