import{_ as a,c as n,o as s,V as t}from"./chunks/framework.CthfA3PS.js";const _=JSON.parse('{"title":"在async await中使用finally","description":"","frontmatter":{"outline":"deep","editLink":false},"headers":[],"relativePath":"frontend/javascript/async.md","filePath":"frontend/javascript/async.md","lastUpdated":1728874708000}'),e={name:"frontend/javascript/async.md"},o=t(`<h1 id="在async-await中使用finally" tabindex="-1">在async await中使用finally <a class="header-anchor" href="#在async-await中使用finally" aria-label="Permalink to &quot;在async await中使用finally&quot;">​</a></h1><h2 id="_1-背景" tabindex="-1">1 背景 <a class="header-anchor" href="#_1-背景" aria-label="Permalink to &quot;1 背景&quot;">​</a></h2><p>使用<strong>async await</strong>模式，主要是将异步模式改为同步模式，但是同时有些场景也需要无论是<strong>resolve</strong>还是<strong>reject</strong>都需要去进行一些必要的操作，如在掉用接口前，需要打开<strong>loading</strong>效果，在调用有结果之后，页面给响应式数据赋值之后，关闭<strong>loading</strong>效果，此时使用<strong>await async</strong>的方式，就会显得比较<strong>麻烦</strong>，需要在<strong>resolve</strong>和<strong>reject</strong>两种模式下关闭<strong>loading</strong>效果（例如在vue中），现在就是想在页面渲染完成或者<strong>reject</strong>之后关闭<strong>loading</strong>效果。</p><h2 id="_2-前言" tabindex="-1">2 前言 <a class="header-anchor" href="#_2-前言" aria-label="Permalink to &quot;2 前言&quot;">​</a></h2><p>在调用后端接口之后，页面重新渲染之后或者确定不渲染之后，关闭<strong>loading</strong>效果。</p><h2 id="_3-实现" tabindex="-1">3 实现 <a class="header-anchor" href="#_3-实现" aria-label="Permalink to &quot;3 实现&quot;">​</a></h2><p>关键点</p><ul><li>链式操作可以直接在<strong>finally</strong>中操作，使用<strong>async await</strong>模式的时候，可以使用如下方案。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>async () =&gt; {</span></span>
<span class="line"><span>  try {</span></span>
<span class="line"><span>    const result1 = await firstAsynchronousFunction();</span></span>
<span class="line"><span>    const result2 = await secondAsynchronousFunction(result1);</span></span>
<span class="line"><span>    console.log(result2);</span></span>
<span class="line"><span>  } catch(err) {</span></span>
<span class="line"><span>    throw new Error(\`Something failed\`);</span></span>
<span class="line"><span>  } finally {</span></span>
<span class="line"><span>    console.log(\`All Tasks are Done\`);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h6 id="参考资源" tabindex="-1">参考资源 <a class="header-anchor" href="#参考资源" aria-label="Permalink to &quot;参考资源&quot;">​</a></h6><p><a href="https://stackoverflow.com/questions/50373337/how-to-use-promise-prototype-finally-in-async-await-syntax" target="_blank" rel="noreferrer">https://stackoverflow.com/questions/50373337/how-to-use-promise-prototype-finally-in-async-await-syntax</a></p>`,11),r=[o];function l(i,p,c,d,h,g){return s(),n("div",null,r)}const y=a(e,[["render",l]]);export{_ as __pageData,y as default};
