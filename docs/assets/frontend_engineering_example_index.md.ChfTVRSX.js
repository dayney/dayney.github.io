import{_ as e,c as t,o as a,V as o}from"./chunks/framework.CsbsVE7l.js";const m=JSON.parse('{"title":"前端工程化","description":"","frontmatter":{"layout":"doc","title":"前端工程化","editLink":true},"headers":[],"relativePath":"frontend/engineering/example/index.md","filePath":"frontend/engineering/example/index.md","lastUpdated":1748791719000}'),r={name:"frontend/engineering/example/index.md"},i=o('<h1 id="前端工程化的定义" tabindex="-1">前端工程化的定义 <a class="header-anchor" href="#前端工程化的定义" aria-label="Permalink to &quot;前端工程化的定义&quot;">​</a></h1><p>chatgpt的解释是指将某一项技术、流程或操作系统化、标准化，使其更高效、可靠并易于大规模应用的过程。在软件开发中，工程化通常包括以下几个方面：模范化、自动化、模块化、持续集成与持续交付（CI/CD）、可维护性、质量保障。我个人的理解就是标准化，如同一个大学军训的方阵一样，大家采用统一的标准来输出，才能达到一个步调一致的动作出来。持续稳定的高质量的交付。后续整体，我主要是以以下的顺序来介绍，我在前端项目中做了哪些事。</p><hr><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>目前前端采用的编辑器是 vsCode，一下所有的配置都是针对前端，使用vscode相关的插件。</p></div><h2 id="规范化" tabindex="-1">规范化 <a class="header-anchor" href="#规范化" aria-label="Permalink to &quot;规范化&quot;">​</a></h2><p>通过制定代码规范、文档标准、项目结构等，确保团队成员的开发工作一致性。 - 编码规范化（环境：vscode，主要是使用vscode相关插件来约定编码规范）。 - <a href="./git.html">git commi</a>t的规范话，commit提交的规范化（方便从commit中知道每次的任务是什么，方便快速的code review）。 - api规范化（与后端约定什么样的格式的api，方便前端抽离公共的axios封装的http request）。 - 项目结构的规范化。</p><h2 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h2><p>将复杂的系统分解为独立的模块，便于开发、测试、维护和扩展。</p><ul><li>使用各种私有包管理平台，<strong>GitHub Packages</strong>、<strong>Nexus Repository (Sonatype)</strong>、<strong>Verdaccio</strong></li></ul><h2 id="可维护性" tabindex="-1">可维护性 <a class="header-anchor" href="#可维护性" aria-label="Permalink to &quot;可维护性&quot;">​</a></h2><p>通过良好的架构设计和编码规范，确保项目在后续的迭代中易于维护和扩展。</p><ul><li><strong>代码规范化</strong>、<strong>详细的注释和文档</strong>，其他就是<strong>单元测试和自动化测试</strong>、<strong>良好的代码结构和设计模式</strong>， 后面这两个主要是根据项目的特性（如公共工具需要写单元测试，业务项目一般不需要）和团队成员的能力的提升来加强（<strong>code review</strong>是一个重要的方式）。</li></ul><h2 id="质量保障" tabindex="-1">质量保障 <a class="header-anchor" href="#质量保障" aria-label="Permalink to &quot;质量保障&quot;">​</a></h2><p>通过单元测试、集成测试等手段，保证代码质量。</p><ul><li>目前常用的就是公共的utils使用vitest来写自动化测试脚本和<code>code review</code>来保障代码的质量。</li></ul><h2 id="自动化" tabindex="-1">自动化 <a class="header-anchor" href="#自动化" aria-label="Permalink to &quot;自动化&quot;">​</a></h2><p>通过工具或脚本将手动的开发、测试、部署等流程自动化，以减少人为错误和重复劳动。</p><ul><li>打包相关的<strong>gulp</strong>，<strong>webpack</strong>，<strong>vite</strong>等常用的，此处我还是希望可以使用统一的一个来实现，主要是方便维护和降低学习成本。</li></ul><h2 id="持续集成与持续交付-ci-cd" tabindex="-1">持续集成与持续交付（CI/CD） <a class="header-anchor" href="#持续集成与持续交付-ci-cd" aria-label="Permalink to &quot;持续集成与持续交付（CI/CD）&quot;">​</a></h2><p>通过集成工具，自动化代码的集成、测试和部署，使得代码可以快速且高质量地交付。</p><ul><li>当前本blog使用的就是 <code>github action</code>,实际工作环境中使用的是<code>Jenkins</code>。</li></ul>',21),n=[i];function s(l,c,d,h,p,u){return a(),t("div",null,n)}const _=e(r,[["render",s]]);export{m as __pageData,_ as default};
