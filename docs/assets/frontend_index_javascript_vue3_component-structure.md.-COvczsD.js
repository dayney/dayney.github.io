import{_ as a,c as e,o as l,V as i}from"./chunks/framework.CsbsVE7l.js";const f=JSON.parse('{"title":"Vue3 组件结构规范","description":"","frontmatter":{"outline":"deep","editLink":false},"headers":[],"relativePath":"frontend/index/javascript/vue3/component-structure.md","filePath":"frontend/index/javascript/vue3/component-structure.md","lastUpdated":1748791719000}'),t={name:"frontend/index/javascript/vue3/component-structure.md"},r=i('<h1 id="vue3-组件结构规范" tabindex="-1">Vue3 组件结构规范 <a class="header-anchor" href="#vue3-组件结构规范" aria-label="Permalink to &quot;Vue3 组件结构规范&quot;">​</a></h1><h2 id="_1-组件命名" tabindex="-1">1 组件命名 <a class="header-anchor" href="#_1-组件命名" aria-label="Permalink to &quot;1 组件命名&quot;">​</a></h2><ul><li>组件名应该始终是多个单词的，根组件 App 除外</li><li>组件名应该以高级别的单词开头，以描述性的修饰词结尾</li><li>组件名应该始终是 PascalCase 的</li><li>基础组件名应该以一个特定的前缀开头，比如 Base、App 或 V</li></ul><h2 id="_2-组合式-api-规范" tabindex="-1">2 组合式 API 规范 <a class="header-anchor" href="#_2-组合式-api-规范" aria-label="Permalink to &quot;2 组合式 API 规范&quot;">​</a></h2><h3 id="_2-1-命名规范" tabindex="-1">2.1 命名规范 <a class="header-anchor" href="#_2-1-命名规范" aria-label="Permalink to &quot;2.1 命名规范&quot;">​</a></h3><ul><li>组合式函数名应该始终是多个单词的</li><li>组合式函数名应该以 use 开头</li><li>组合式函数名应该使用 camelCase</li><li>组合式函数名应该具有描述性</li></ul><h3 id="_2-2-代码组织" tabindex="-1">2.2 代码组织 <a class="header-anchor" href="#_2-2-代码组织" aria-label="Permalink to &quot;2.2 代码组织&quot;">​</a></h3><ul><li>相关的逻辑应该放在同一个组合式函数中</li><li>组合式函数应该返回一个对象</li><li>组合式函数应该使用 ref 或 reactive 来管理状态</li><li>组合式函数应该使用 computed 和 watch 来处理副作用</li></ul><h3 id="_2-3-props-定义" tabindex="-1">2.3 Props 定义 <a class="header-anchor" href="#_2-3-props-定义" aria-label="Permalink to &quot;2.3 Props 定义&quot;">​</a></h3><ul><li>Props 定义应该使用 defineProps</li><li>Props 定义应该尽可能详细，至少需要指定其类型</li><li>Props 定义应该使用 TypeScript 类型注解</li><li>Props 定义应该加上注释，说明其用途</li></ul><h2 id="_3-模板规范" tabindex="-1">3 模板规范 <a class="header-anchor" href="#_3-模板规范" aria-label="Permalink to &quot;3 模板规范&quot;">​</a></h2><h3 id="_3-1-模板语法" tabindex="-1">3.1 模板语法 <a class="header-anchor" href="#_3-1-模板语法" aria-label="Permalink to &quot;3.1 模板语法&quot;">​</a></h3><ul><li>使用 v-for 时必须加上 key</li><li>避免 v-if 和 v-for 同时使用</li><li>使用 v-show 代替 v-if 进行频繁切换</li><li>使用 v-once 优化静态内容</li></ul><h3 id="_3-2-样式规范" tabindex="-1">3.2 样式规范 <a class="header-anchor" href="#_3-2-样式规范" aria-label="Permalink to &quot;3.2 样式规范&quot;">​</a></h3><ul><li>使用 scoped 属性</li><li>使用 BEM 命名规范</li><li>使用 CSS 预处理器（如 SCSS）</li><li>避免使用 !important</li></ul><h2 id="_4-性能优化" tabindex="-1">4 性能优化 <a class="header-anchor" href="#_4-性能优化" aria-label="Permalink to &quot;4 性能优化&quot;">​</a></h2><h3 id="_4-1-代码分割" tabindex="-1">4.1 代码分割 <a class="header-anchor" href="#_4-1-代码分割" aria-label="Permalink to &quot;4.1 代码分割&quot;">​</a></h3><ul><li>使用异步组件</li><li>使用路由懒加载</li><li>合理使用 keep-alive</li><li>使用 Suspense 处理异步组件</li></ul><h3 id="_4-2-数据处理" tabindex="-1">4.2 数据处理 <a class="header-anchor" href="#_4-2-数据处理" aria-label="Permalink to &quot;4.2 数据处理&quot;">​</a></h3><ul><li>合理使用计算属性</li><li>避免在模板中使用复杂表达式</li><li>使用 v-once 优化静态内容</li><li>使用 shallowRef 和 shallowReactive 优化性能</li></ul>',20),o=[r];function n(s,h,u,c,d,_){return l(),e("div",null,o)}const m=a(t,[["render",n]]);export{f as __pageData,m as default};
