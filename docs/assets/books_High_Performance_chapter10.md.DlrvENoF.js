import{_ as a,c as e,o as t,V as o}from"./chunks/framework.CthfA3PS.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep","editLink":false},"headers":[],"relativePath":"books/High_Performance/chapter10.md","filePath":"books/High_Performance/chapter10.md","lastUpdated":1705669135000}'),i={name:"books/High_Performance/chapter10.md"},r=o('<h3 id="实际环境" tabindex="-1">实际环境 <a class="header-anchor" href="#实际环境" aria-label="Permalink to &quot;实际环境&quot;">​</a></h3><ol><li>目前使用webpack/gulp完全可以做到打包。</li><li>部署需要使用到shell来进行文件的移动。</li></ol><h3 id="小结（apache-ant）" tabindex="-1">小结（Apache Ant） <a class="header-anchor" href="#小结（apache-ant）" aria-label="Permalink to &quot;小结（Apache Ant） {#小结（apache-ant）}&quot;">​</a></h3><blockquote><ol><li><p>合并JavaScript文件以减少HTTP请求；</p></li><li><p>使用YUI Compressor压缩JavaScript；</p></li><li><p>在服务器端压缩JavaScript文件(Gzip编码);</p></li><li><p>通过正确设置HTTP响应头来缓存JavaScript文件，通过向文件名增加时间戳来避免缓存问题；</p></li><li><p>使用CDN提供JavaScript文件，CDN不仅可以提升性能，它也为你管理文件压缩与缓存；</p></li></ol></blockquote>',4),c=[r];function l(p,n,s,_,h,d){return t(),e("div",null,c)}const u=a(i,[["render",l]]);export{f as __pageData,u as default};
