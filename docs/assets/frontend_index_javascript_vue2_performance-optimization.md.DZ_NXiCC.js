import{_ as e,c as s,o as t,V as l,m as i}from"./chunks/framework.CsbsVE7l.js";const g=JSON.parse('{"title":"Vue2 性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/index/javascript/vue2/performance-optimization.md","filePath":"frontend/index/javascript/vue2/performance-optimization.md","lastUpdated":1748791719000}'),n={name:"frontend/index/javascript/vue2/performance-optimization.md"},h=l(`<h1 id="vue2-性能优化" tabindex="-1">Vue2 性能优化 <a class="header-anchor" href="#vue2-性能优化" aria-label="Permalink to &quot;Vue2 性能优化&quot;">​</a></h1><h2 id="_1-v-if-与-v-show-的合理使用" tabindex="-1">1. v-if 与 v-show 的合理使用 <a class="header-anchor" href="#_1-v-if-与-v-show-的合理使用" aria-label="Permalink to &quot;1. v-if 与 v-show 的合理使用&quot;">​</a></h2><ul><li><code>v-if</code> 适合切换频率低的场景，动态销毁和创建 DOM，节省内存。</li><li><code>v-show</code> 适合频繁切换的场景，仅切换 display，切换更快但占用内存。</li></ul><h2 id="_2-列表渲染优化" tabindex="-1">2. 列表渲染优化 <a class="header-anchor" href="#_2-列表渲染优化" aria-label="Permalink to &quot;2. 列表渲染优化&quot;">​</a></h2><ul><li>使用唯一且稳定的 <code>key</code>，避免不必要的 DOM diff。</li><li>大数据量列表建议使用虚拟滚动（如 vue-virtual-scroll-list）。</li></ul><h2 id="_3-响应式数据优化" tabindex="-1">3. 响应式数据优化 <a class="header-anchor" href="#_3-响应式数据优化" aria-label="Permalink to &quot;3. 响应式数据优化&quot;">​</a></h2><ul><li>避免为响应式对象频繁添加/删除属性。</li><li>使用 <code>Vue.set</code>/<code>this.$set</code> 保证响应式。</li></ul><h2 id="_4-异步组件与懒加载" tabindex="-1">4. 异步组件与懒加载 <a class="header-anchor" href="#_4-异步组件与懒加载" aria-label="Permalink to &quot;4. 异步组件与懒加载&quot;">​</a></h2><ul><li>使用异步组件按需加载，减少首屏体积：<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;async-example&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./my-async-component&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], resolve)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></li><li>路由懒加载：<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./Foo.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ul><h2 id="_5-事件与内存管理" tabindex="-1">5. 事件与内存管理 <a class="header-anchor" href="#_5-事件与内存管理" aria-label="Permalink to &quot;5. 事件与内存管理&quot;">​</a></h2><ul><li>及时解绑全局事件、定时器，防止内存泄漏。</li><li>使用 <code>beforeDestroy</code> 生命周期清理副作用。</li></ul><h2 id="_6-组件缓存" tabindex="-1">6. 组件缓存 <a class="header-anchor" href="#_6-组件缓存" aria-label="Permalink to &quot;6. 组件缓存&quot;">​</a></h2><ul><li>使用 <code>&lt;keep-alive&gt;</code> 缓存组件，提升切换性能。</li></ul><h2 id="_7-其他优化" tabindex="-1">7. 其他优化 <a class="header-anchor" href="#_7-其他优化" aria-label="Permalink to &quot;7. 其他优化&quot;">​</a></h2><ul><li>合理拆分大组件，提升复用性和可维护性。</li><li>使用 <code>v-once</code> 渲染静态内容。</li><li>使用 <code>computed</code> 替代复杂的 <code>methods</code> 计算。</li></ul><h2 id="_8-经典案例与参考" tabindex="-1">8. 经典案例与参考 <a class="header-anchor" href="#_8-经典案例与参考" aria-label="Permalink to &quot;8. 经典案例与参考&quot;">​</a></h2>`,16),o=["target"],r=["target"];function d(a,p,c,k,u,E){return t(),s("div",null,[h,i("ul",null,[i("li",null,[i("a",{href:"https://cn.vuejs.org/v2/guide/optimizations.html",target:a._blank,rel:"noreferrer"},"Vue 官方性能优化指南",8,o)]),i("li",null,[i("a",{href:"https://juejin.cn/post/6844904101386983438",target:a._blank,rel:"noreferrer"},"Vue2 大型表格优化实践",8,r)])])])}const m=e(n,[["render",d]]);export{g as __pageData,m as default};
