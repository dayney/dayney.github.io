import{_ as e,c as a,o as t,V as r}from"./chunks/framework.58kB5Xqm.js";const g=JSON.parse('{"title":"高性能JavaScript读书笔记--加载和执行","description":"","frontmatter":{"outline":"deep","editLink":false},"headers":[],"relativePath":"books/High_Performance/chapter1.md","filePath":"books/High_Performance/chapter1.md","lastUpdated":1705650796000}'),o={name:"books/High_Performance/chapter1.md"},c=r('<h1 id="高性能javascript读书笔记-加载和执行" tabindex="-1"><a class="header-anchor" href="#高性能javascript读书笔记-加载和执行">高性能JavaScript读书笔记--加载和执行</a></h1><h3 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展">拓展</a></h3><p>[ ] 1. 需要研究现在常用的lazyload的原理。 ​ ​1.1 书中提到的<a href="./">lazyload</a>(<a href="https://github.com/rgrove/lazyload" target="_blank" rel="noreferrer">https://github.com/rgrove/lazyload</a>)</p><p>1.2 书中提到的，具有局限性的<a href="https://github.com/getify/LABjs" target="_blank" rel="noreferrer">labjs</a></p><p>1.3 目前AMD模式的<a href="./">require</a></p><p>1.4 目前CMD模式的，其实与<a href="./">require</a>就是加载前置和使用的时候加载的区别 ​</p><p>懒加载工具 <a href="https://github.com/rgrove/lazyload" target="_blank" rel="noreferrer">另一个无阻塞加载工具1-雅虎大神的作品lazyload</a></p><p><a href="https://github.com/getify/LABjs" target="_blank" rel="noreferrer">另一个无阻塞加载工具2-lab.js</a></p><h3 id="小结：" tabindex="-1"><a class="header-anchor" href="#小结：">小结：</a></h3><blockquote><ol><li><p><code>&lt;/body&gt;</code>闭合标签之前，将所有<code>&lt;script&gt;</code>标签放到页面的底部，这样确保在脚本执行前页面已经完成了渲染</p></li><li><p>合并脚本。页面中的<code>&lt;script&gt;</code>标签越少，加载速度就越快，响应也更迅捷。无论外链文件还是内嵌脚本都是如此。</p></li><li><p>有多种无阻塞下载JavaScript的方法。</p><blockquote><p>3.1 使用<code>&lt;script&gt;</code>标签的<code>defer</code>属性；在<code>HTML5</code>中有<code>async</code>属性，提供异步下载的功能； 3.2 使用动态创建的<code>&lt;script&gt;</code>元素来下载并执行代码； 3.3 使用<code>XHR</code>对象下载<code>JavaScript</code>代码并注入页面中； ::: :::</p></blockquote></li></ol></blockquote>',10),d=[c];function l(p,i,s,h,n,_){return t(),a("div",null,d)}const b=e(o,[["render",l]]);export{g as __pageData,b as default};
