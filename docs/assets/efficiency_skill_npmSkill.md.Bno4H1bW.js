import{_ as s,c as a,o as n,V as e}from"./chunks/framework.C-fAE6Ku.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep","editLink":false},"headers":[],"relativePath":"efficiency/skill/npmSkill.md","filePath":"efficiency/skill/npmSkill.md","lastUpdated":1721724941000}'),p={name:"efficiency/skill/npmSkill.md"},o=e(`<h2 id="npm-使用小技巧" tabindex="-1">Npm 使用小技巧 <a class="header-anchor" href="#npm-使用小技巧" aria-label="Permalink to &quot;Npm 使用小技巧&quot;">​</a></h2><hr><h4 id="_1-从指定的路径安装" tabindex="-1">1. 从指定的路径安装 <a class="header-anchor" href="#_1-从指定的路径安装" aria-label="Permalink to &quot;1. 从指定的路径安装&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 那么安装方法是：</span></span>
<span class="line"><span>npm install https://github.com/webpack-contrib/mini-css-extract-plugin.git --save</span></span></code></pre></div><h4 id="_2-使用-ssh-安装本地包" tabindex="-1">2. 使用 ** ssh ** 安装本地包 <a class="header-anchor" href="#_2-使用-ssh-安装本地包" aria-label="Permalink to &quot;2. 使用 ** ssh ** 安装本地包&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># npm install git+【仓库ssh地址】</span></span>
<span class="line"><span>npm install git+https://isaacs@github.com/npm/npm.git</span></span></code></pre></div><h4 id="_3-从指定的镜像源安装" tabindex="-1">3. 从指定的镜像源安装 <a class="header-anchor" href="#_3-从指定的镜像源安装" aria-label="Permalink to &quot;3. 从指定的镜像源安装&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># npm --registry 【临时镜像地址】install 【包名称】 </span></span>
<span class="line"><span>npm --registry http://www.xxxx.com install logger-sdk</span></span></code></pre></div><h4 id="_4-换回国外官方源" tabindex="-1">4. 换回国外官方源 <a class="header-anchor" href="#_4-换回国外官方源" aria-label="Permalink to &quot;4. 换回国外官方源&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm config set registry https://registry.npmjs.org</span></span></code></pre></div><h4 id="_5-查看使用的源地址" tabindex="-1">5. 查看使用的源地址 <a class="header-anchor" href="#_5-查看使用的源地址" aria-label="Permalink to &quot;5. 查看使用的源地址&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm config get registry</span></span></code></pre></div><h4 id="_6-给指定的包设置镜像源-可以解决node-sass兼容的问题" tabindex="-1">6. 给指定的包设置镜像源，可以解决node-sass兼容的问题 <a class="header-anchor" href="#_6-给指定的包设置镜像源-可以解决node-sass兼容的问题" aria-label="Permalink to &quot;6. 给指定的包设置镜像源，可以解决node-sass兼容的问题&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 在项目的 .npmrc 文件中给特定的包设置指定的镜像源</span></span>
<span class="line"><span># 【包名】:registry=【指定的镜像地址】</span></span>
<span class="line"><span>hyjk-logger-sdk:registry=http://npm-vue.test.ybm100.com/</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 常规的镜像源地址</span></span>
<span class="line"><span># registry=https://registry.npmmirror.com</span></span>
<span class="line"><span>disturl=https://npmmirror.com/dist/</span></span>
<span class="line"><span>sass_binary_site=https://npmmirror.com/mirrors/node-sass/</span></span>
<span class="line"><span>phantomjs_cdnurl=https://npmmirror.com/mirrors/phantomjs/</span></span>
<span class="line"><span>electron_mirror=https://npmmirror.com/mirrors/electron/</span></span>
<span class="line"><span>electron_mirror=https://npmmirror.com/mirrors/electron/</span></span>
<span class="line"><span>sass_binary_site=https://npmmirror.com/mirrors/node-sass/</span></span>
<span class="line"><span>phantomjs_cdnurl=https://npmmirror.com/mirrors/phantomjs/</span></span>
<span class="line"><span>chromedriver_cdnurl=https://npmmirror.com/mirrors/chromedriver/</span></span>
<span class="line"><span>operadriver_cdnurl=https://npmmirror.com/mirrors/operadriver/</span></span>
<span class="line"><span>python_mirror=https://npmmirror.com/mirrors/python/</span></span>
<span class="line"><span>electron_builder_binaries_mirror=https://npmmirror.com/mirrors/electron-builder-binaries/</span></span>
<span class="line"><span>node_sqlite3_binary_host_mirror=https://npmmirror.com/mirrors</span></span>
<span class="line"><span>sharp_dist_base_url=https://npmmirror.com/mirrors/sharp-libvips/</span></span>
<span class="line"><span>puppeteer_download_host=https://npmmirror.com/mirrors/</span></span>
<span class="line"><span>sentrycli_cdnurl=https://npmmirror.com/mirrors/sentry-cli/</span></span>
<span class="line"><span>sqlite3_binary_site=https://npmmirror.com/mirrors/sqlite3/</span></span></code></pre></div><h4 id="_7-使用-npm-node-包管理器-来执行某个文件夹下的-package-json-中定义的脚本。" tabindex="-1">7. 使用 <code>npm</code>（Node 包管理器）来执行某个文件夹下的 <code>package.json</code> 中定义的脚本。 <a class="header-anchor" href="#_7-使用-npm-node-包管理器-来执行某个文件夹下的-package-json-中定义的脚本。" aria-label="Permalink to &quot;7. 使用 \`npm\`（Node 包管理器）来执行某个文件夹下的 \`package.json\` 中定义的脚本。&quot;">​</a></h4><p>使用 <code>npm</code> 的 <code>--prefix</code> 参数指定要运行的脚本所在的文件夹：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm --prefix [目录地址路径] run start</span></span>
<span class="line"><span></span></span>
<span class="line"><span>npm --prefix ./folder1 run start</span></span></code></pre></div><h4 id="_8-在-package-json-文件中-main-和-module-的区别及使用方式" tabindex="-1">8. 在 <code>package.json</code> 文件中，<code>main</code> 和 <code>module</code> 的区别及使用方式； <a class="header-anchor" href="#_8-在-package-json-文件中-main-和-module-的区别及使用方式" aria-label="Permalink to &quot;8. 在 \`package.json\` 文件中，\`main\` 和 \`module\` 的区别及使用方式；&quot;">​</a></h4><p>在 <code>package.json</code> 文件中，<code>main</code> 和 <code>module</code> 字段指定了项目的入口点文件路径，用于指示不同环境如何加载模块。这些字段在模块打包和分发时非常重要，因为它们告诉模块解析器（如 Node.js 或打包工具）应该使用哪个文件作为入口点。</p><h3 id="main-字段" tabindex="-1"><code>main</code> 字段 <a class="header-anchor" href="#main-字段" aria-label="Permalink to &quot;\`main\` 字段&quot;">​</a></h3><ul><li><strong><code>main</code> 字段</strong> 指定了当模块被 <code>require</code> 时使用的入口文件。通常用于 CommonJS 环境（例如 Node.js）。</li><li>例如，当你在 Node.js 中执行 <code>require(&#39;your-module&#39;)</code> 时，<code>main</code> 字段指定的文件将被加载。</li><li>当你使用 <code>require(&#39;my-library&#39;)</code> 时，Node.js 或 CommonJS 模块解析器将会加载 <code>dist/tool.umd.js</code> 文件。</li><li>这个文件通常是 UMD（Universal Module Definition）格式，可以在多种环境下运行（如 CommonJS、AMD 和浏览器全局变量）。</li></ul><h3 id="module-字段" tabindex="-1"><code>module</code> 字段 <a class="header-anchor" href="#module-字段" aria-label="Permalink to &quot;\`module\` 字段&quot;">​</a></h3><ul><li><p><strong><code>module</code> 字段</strong> 提供了 ES Module 规范的入口文件路径。这通常用于现代 JavaScript 打包工具（如 Webpack、Rollup 和 Parcel）以优化和处理 ES6 模块。</p></li><li><p>当使用 ES Module 导入语法（<code>import</code>）时，打包工具会优先选择 <code>module</code> 字段指定的文件。</p></li><li><p>当你使用 <code>import { something } from &#39;my-library&#39;</code> 时，打包工具（如 Webpack 或 Rollup）将会优先加载 <code>dist/tool.es.js</code> 文件。</p></li><li><p>这个文件通常是 ES Module 格式，具有静态分析的优点，有助于 Tree Shaking 和更好的优化。</p></li></ul><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h4><p>假设你的 <code>package.json</code> 文件中有以下内容：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;name&quot;: &quot;my-library&quot;,</span></span>
<span class="line"><span>  &quot;version&quot;: &quot;1.0.0&quot;,</span></span>
<span class="line"><span>  &quot;main&quot;: &quot;dist/tool.umd.js&quot;,</span></span>
<span class="line"><span>  &quot;module&quot;: &quot;dist/tool.es.js&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="npm-安装-git-仓库的协议" tabindex="-1">npm 安装 git 仓库的协议： <a class="header-anchor" href="#npm-安装-git-仓库的协议" aria-label="Permalink to &quot;npm 安装 git 仓库的协议：&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;protocol&gt;://[&lt;user&gt;[:&lt;password&gt;]@]&lt;hostname&gt;[:&lt;port&gt;][:][/]&lt;path&gt;[#&lt;commit-ish&gt; | #semver:&lt;semver&gt;]</span></span></code></pre></div>`,28),i=[o];function t(l,r,c,d,m,h){return n(),a("div",null,i)}const b=s(p,[["render",t]]);export{g as __pageData,b as default};
