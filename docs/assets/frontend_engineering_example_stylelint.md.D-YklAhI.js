import{_ as n,c as t,o as s,V as e}from"./chunks/framework.CsbsVE7l.js";const q=JSON.parse('{"title":"Stylelint","description":"","frontmatter":{"outline":"deep","editLink":false},"headers":[],"relativePath":"frontend/engineering/example/stylelint.md","filePath":"frontend/engineering/example/stylelint.md","lastUpdated":1748791719000}'),a={name:"frontend/engineering/example/stylelint.md"},l=e(`<h1 id="stylelint" tabindex="-1">Stylelint <a class="header-anchor" href="#stylelint" aria-label="Permalink to &quot;Stylelint&quot;">​</a></h1><h2 id="解释" tabindex="-1">解释 <a class="header-anchor" href="#解释" aria-label="Permalink to &quot;解释&quot;">​</a></h2><p>是一个用于 <strong>CSS</strong>、<strong>SCSS</strong>、<strong>Less</strong> 和其他样式语言的开源代码<strong>静态分析工具</strong>，它可以帮助开发者检查样式表中的代码质量和一致性。通过 Stylelint，你可以设置规则来自动化地检查代码是否遵循某些最佳实践和格式要求，从而避免错误、保持代码一致性，并提高可维护性。 此文件与<code>.gitignore</code>的功能是一样的，忽略项目中某一类型/某一个文件</p><h2 id="主要功能和特点" tabindex="-1">主要功能和特点： <a class="header-anchor" href="#主要功能和特点" aria-label="Permalink to &quot;主要功能和特点：&quot;">​</a></h2><p>​ 1. <strong>代码质量检测</strong>：</p><p>​ • Stylelint 可以检测样式代码中的常见问题，如无效的属性值、重复的规则等。</p><p>​ 2. <strong>代码格式检查</strong>：</p><p>​ • 它可以检测代码的格式问题，比如不正确的缩进、不一致的空格使用等，类似于 ESLint 在 JavaScript 中的功能。</p><p>​ 3. <strong>自定义规则</strong>：</p><p>​ • 你可以配置规则，强制执行团队内部的编码规范，或者使用 Stylelint 提供的已有规则。</p><p>​ 4. <strong>支持多种语言</strong>：</p><p>​ • Stylelint 支持纯 CSS、Sass、SCSS、Less 和其他类似的样式语言，能够处理各种 CSS 方言。</p><p>​ 5. <strong>集成</strong>：</p><p>​ • 可以与多种编辑器和工具集成，比如 VSCode、Atom 等，支持自动修复部分可修复的问题。</p><p>​ 6. <strong>插件扩展</strong>：</p><p>​ • 通过插件系统，你可以扩展 Stylelint 的功能，增加额外的规则或语言支持。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>使用 VSCode 插件生成</p><p>​ 1. <strong>安装 VSCode 的 Stylelint 插件</strong></p><p>在 VSCode 中安装 <a href="https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint" target="_blank" rel="noreferrer">Stylelint 插件</a>，这个插件可以帮助你在编写样式时实时检测样式代码中的错误。</p><p>​ 2. <strong>创建配置文件</strong></p><p>通过命令面板（Ctrl + Shift + P）并输入 Stylelint: Create Configuration File，按回车后会在项目根目录生成 .stylelintrc 文件。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># ..stylelintrc</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;extends&quot;: &quot;stylelint-config-standard&quot;,</span></span>
<span class="line"><span>  &quot;rules&quot;: {</span></span>
<span class="line"><span>    &quot;indentation&quot;: 2,                 // 缩进2个空格</span></span>
<span class="line"><span>    &quot;string-quotes&quot;: &quot;single&quot;,        // 使用单引号</span></span>
<span class="line"><span>    &quot;color-hex-case&quot;: &quot;lower&quot;,        // 十六进制颜色使用小写</span></span>
<span class="line"><span>    &quot;max-empty-lines&quot;: 1,             // 最大空行数为1</span></span>
<span class="line"><span>    &quot;no-eol-whitespace&quot;: true,        // 禁止行尾空格</span></span>
<span class="line"><span>    &quot;block-no-empty&quot;: true,           // 禁止空的代码块</span></span>
<span class="line"><span>    &quot;selector-max-id&quot;: 0,             // 禁止使用ID选择器</span></span>
<span class="line"><span>    &quot;selector-class-pattern&quot;: &quot;^[a-z0-9\\\\-_]+$&quot;, // 强制类名为小写字母、数字、短划线和下划线</span></span>
<span class="line"><span>    &quot;max-nesting-depth&quot;: 3            // 限制选择器嵌套深度为3</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><strong>Stylelint 官方规则文档</strong>: <a href="https://stylelint.io/user-guide/rules/list" target="_blank" rel="noreferrer">https://stylelint.io/user-guide/rules/list</a></p>`,24),p=[l];function o(i,r,c,u,d,g){return s(),t("div",null,p)}const S=n(a,[["render",o]]);export{q as __pageData,S as default};
