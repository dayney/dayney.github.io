import{_ as s,c as n,o as a,V as p}from"./chunks/framework.CsbsVE7l.js";const f=JSON.parse('{"title":".eslintrc","description":"","frontmatter":{"outline":"deep","editLink":false},"headers":[],"relativePath":"frontend/engineering/example/eslintrc.md","filePath":"frontend/engineering/example/eslintrc.md","lastUpdated":1748792352000}'),e={name:"frontend/engineering/example/eslintrc.md"},l=p(`<h1 id="eslintrc" tabindex="-1">.eslintrc <a class="header-anchor" href="#eslintrc" aria-label="Permalink to &quot;.eslintrc&quot;">​</a></h1><h2 id="_1-eslint-9-x-是一种用于识别和报告-ecmascript-javascript-代码中发现的模式的工具-其目标是使代码更加一致并避免错误。" tabindex="-1">1. ESLint 9.x 是一种用于识别和报告 ECMAScript/JavaScript 代码中发现的模式的工具，其目标是使代码更加一致并避免错误。 <a class="header-anchor" href="#_1-eslint-9-x-是一种用于识别和报告-ecmascript-javascript-代码中发现的模式的工具-其目标是使代码更加一致并避免错误。" aria-label="Permalink to &quot;1. ESLint 9.x 是一种用于识别和报告 ECMAScript/JavaScript 代码中发现的模式的工具，其目标是使代码更加一致并避免错误。&quot;">​</a></h2><ul><li><p>有两种模式，在项目代码中用来检测代码的规范，如使用命令<code>npm run eslint</code>, 如果需要使用<code>git hook</code>可以配合<code>husky</code>一起使用,会有更好的体验</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&quot;eslint&quot;: &quot;eslint --ext .js,.ts,.vue --ignore-path .eslintignore  src&quot;,</span></span></code></pre></div></li><li><p>配合<strong>VS Code</strong>中的插件<code>eslint</code>,在编写代码的时候时时提示代码的风格</p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>/* eslint.config.js */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>module.exports = {</span></span>
<span class="line"><span>  root: true,</span></span>
<span class="line"><span>  env: {</span></span>
<span class="line"><span>    node: true,</span></span>
<span class="line"><span>    browser: true,</span></span>
<span class="line"><span>    es2021: true,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  extends: [&#39;plugin:vue/vue3-recommended&#39;, &#39;eslint:recommended&#39;],</span></span>
<span class="line"><span>  parserOptions: {</span></span>
<span class="line"><span>    ecmaVersion: 2021,</span></span>
<span class="line"><span>    sourceType: &#39;module&#39;,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  rules: {</span></span>
<span class="line"><span>    // 基本规则</span></span>
<span class="line"><span>    &#39;no-console&#39;: process.env.NODE_ENV === &#39;production&#39; ? &#39;warn&#39; : &#39;off&#39;,</span></span>
<span class="line"><span>    &#39;no-debugger&#39;: process.env.NODE_ENV === &#39;production&#39; ? &#39;warn&#39; : &#39;off&#39;,</span></span>
<span class="line"><span>    &#39;vue/multi-word-component-names&#39;: &#39;off&#39;,</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 禁止导入Vue 3编译器宏，它们不需要导入</span></span>
<span class="line"><span>    &#39;no-restricted-imports&#39;: [</span></span>
<span class="line"><span>      &#39;error&#39;,</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>        paths: [</span></span>
<span class="line"><span>          {</span></span>
<span class="line"><span>            name: &#39;vue&#39;,</span></span>
<span class="line"><span>            importNames: [&#39;defineProps&#39;, &#39;defineEmits&#39;, &#39;defineExpose&#39;, &#39;withDefaults&#39;],</span></span>
<span class="line"><span>            message: &#39;Vue 3的编译器宏不需要导入。直接使用即可，例如: const props = defineProps(...)&#39;,</span></span>
<span class="line"><span>          },</span></span>
<span class="line"><span>        ],</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 字符串使用单引号</span></span>
<span class="line"><span>    quotes: [&#39;error&#39;, &#39;single&#39;],</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 对象最后一个属性需要添加逗号</span></span>
<span class="line"><span>    &#39;comma-dangle&#39;: [&#39;error&#39;, &#39;always-multiline&#39;],</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 禁止使用require导入资源，应使用ES模块导入</span></span>
<span class="line"><span>    &#39;no-restricted-syntax&#39;: [</span></span>
<span class="line"><span>      &#39;error&#39;,</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>        selector: &quot;CallExpression[callee.name=&#39;require&#39;]&quot;,</span></span>
<span class="line"><span>        message: &quot;使用ES模块导入代替require，如: import image from &#39;@/assets/image.png&#39;&quot;,</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 注释规则</span></span>
<span class="line"><span>    &#39;valid-jsdoc&#39;: [</span></span>
<span class="line"><span>      &#39;warn&#39;,</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>        requireReturn: false,</span></span>
<span class="line"><span>        requireReturnType: false,</span></span>
<span class="line"><span>        requireParamType: false,</span></span>
<span class="line"><span>        requireParamDescription: true,</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>    &#39;require-jsdoc&#39;: [</span></span>
<span class="line"><span>      &#39;warn&#39;,</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>        require: {</span></span>
<span class="line"><span>          FunctionDeclaration: true,</span></span>
<span class="line"><span>          MethodDefinition: true,</span></span>
<span class="line"><span>          ClassDeclaration: true,</span></span>
<span class="line"><span>          ArrowFunctionExpression: false,</span></span>
<span class="line"><span>          FunctionExpression: false,</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 复杂度规则 - 鼓励使用对象映射代替复杂条件</span></span>
<span class="line"><span>    complexity: [&#39;warn&#39;, { max: 10 }],</span></span>
<span class="line"><span>    &#39;max-depth&#39;: [&#39;warn&#39;, { max: 3 }], // 限制嵌套层数，鼓励使用对象映射</span></span>
<span class="line"><span>    &#39;max-statements&#39;: [&#39;warn&#39;, { max: 15 }],</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 命名规则</span></span>
<span class="line"><span>    camelcase: [&#39;warn&#39;, { properties: &#39;always&#39; }],</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 自定义规则：检查大量if判断替换为对象映射</span></span>
<span class="line"><span>    // 使用eslint-plugin-custom-rules插件（需要单独安装）</span></span>
<span class="line"><span>    &#39;custom-rules/prefer-object-mapping&#39;: &#39;warn&#39;,</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 状态相关规则</span></span>
<span class="line"><span>    &#39;custom-rules/status-in-english&#39;: &#39;warn&#39;, // 状态值使用英文</span></span>
<span class="line"><span>    &#39;custom-rules/display-with-zh&#39;: &#39;warn&#39;, // 显示文本添加中文字段</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // Vue组件就近原则规则</span></span>
<span class="line"><span>    &#39;vue/component-tags-order&#39;: [</span></span>
<span class="line"><span>      &#39;error&#39;,</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>        order: [&#39;script&#39;, &#39;template&#39;, &#39;style&#39;],</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>    &#39;vue/order-in-components&#39;: [</span></span>
<span class="line"><span>      &#39;error&#39;,</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>        order: [&#39;name&#39;, &#39;components&#39;, &#39;props&#39;, &#39;data&#39;, &#39;computed&#39;, &#39;watch&#39;, &#39;methods&#39;, &#39;lifecycle&#39;],</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>    &#39;vue/component-name-in-template-casing&#39;: [&#39;error&#39;, &#39;PascalCase&#39;],</span></span>
<span class="line"><span>    &#39;vue/component-definition-name-casing&#39;: [&#39;error&#39;, &#39;PascalCase&#39;],</span></span>
<span class="line"><span>    &#39;vue/require-default-prop&#39;: &#39;error&#39;,</span></span>
<span class="line"><span>    &#39;vue/require-prop-types&#39;: &#39;error&#39;,</span></span>
<span class="line"><span>    &#39;vue/attributes-order&#39;: [</span></span>
<span class="line"><span>      &#39;error&#39;,</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>        order: [</span></span>
<span class="line"><span>          &#39;DEFINITION&#39;,</span></span>
<span class="line"><span>          &#39;LIST_RENDERING&#39;,</span></span>
<span class="line"><span>          &#39;CONDITIONALS&#39;,</span></span>
<span class="line"><span>          &#39;RENDER_MODIFIERS&#39;,</span></span>
<span class="line"><span>          &#39;GLOBAL&#39;,</span></span>
<span class="line"><span>          &#39;UNIQUE&#39;,</span></span>
<span class="line"><span>          &#39;TWO_WAY_BINDING&#39;,</span></span>
<span class="line"><span>          &#39;OTHER_DIRECTIVES&#39;,</span></span>
<span class="line"><span>          &#39;OTHER_ATTR&#39;,</span></span>
<span class="line"><span>          &#39;EVENTS&#39;,</span></span>
<span class="line"><span>          &#39;CONTENT&#39;,</span></span>
<span class="line"><span>        ],</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  overrides: [</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      files: [&#39;src/views/**/*.vue&#39;],</span></span>
<span class="line"><span>      rules: {</span></span>
<span class="line"><span>        // 视图组件中的附加规则</span></span>
<span class="line"><span>        &#39;vue/max-attributes-per-line&#39;: [</span></span>
<span class="line"><span>          &#39;warn&#39;,</span></span>
<span class="line"><span>          {</span></span>
<span class="line"><span>            singleline: 3,</span></span>
<span class="line"><span>            multiline: 1,</span></span>
<span class="line"><span>          },</span></span>
<span class="line"><span>        ],</span></span>
<span class="line"><span>        &#39;vue/attribute-hyphenation&#39;: [&#39;warn&#39;, &#39;always&#39;],</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>  // 全局变量</span></span>
<span class="line"><span>  globals: {</span></span>
<span class="line"><span>    defineProps: &#39;readonly&#39;,</span></span>
<span class="line"><span>    defineEmits: &#39;readonly&#39;,</span></span>
<span class="line"><span>    defineExpose: &#39;readonly&#39;,</span></span>
<span class="line"><span>    withDefaults: &#39;readonly&#39;,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>};</span></span></code></pre></div>`,4),i=[l];function c(r,t,o,u,d,m){return a(),n("div",null,i)}const g=s(e,[["render",c]]);export{f as __pageData,g as default};
