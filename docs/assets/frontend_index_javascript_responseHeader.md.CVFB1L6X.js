import{_ as e,c as i,o,V as t}from"./chunks/framework.CsbsVE7l.js";const C=JSON.parse('{"title":"常见响应头的作用及浏览器处理方式","description":"","frontmatter":{"outline":"deep","editLink":false},"headers":[],"relativePath":"frontend/index/javascript/responseHeader.md","filePath":"frontend/index/javascript/responseHeader.md","lastUpdated":1748791719000}'),a={name:"frontend/index/javascript/responseHeader.md"},l=t('<h1 id="常见响应头的作用及浏览器处理方式" tabindex="-1">常见响应头的作用及浏览器处理方式 <a class="header-anchor" href="#常见响应头的作用及浏览器处理方式" aria-label="Permalink to &quot;常见响应头的作用及浏览器处理方式&quot;">​</a></h1><h2 id="_1-content-type" tabindex="-1">1. Content-Type <a class="header-anchor" href="#_1-content-type" aria-label="Permalink to &quot;1. Content-Type&quot;">​</a></h2><ul><li>作用: 指定响应内容的媒体类型，告诉浏览器如何解释响应体。</li><li>浏览器处理:</li><li><code>text/html</code>：渲染为 HTML 页面。</li><li><code>application/json</code>：将内容作为 JSON 解析（如果由 JavaScript 发起的 Fetch 或 XMLHttpRequest 请求）。</li><li><code>application/javascript</code>：将内容作为 JavaScript 执行（如 <code>&lt;script&gt;</code> 元素）。</li><li>image/png 或其他图片类型：将内容作为图片渲染。</li></ul><h2 id="_2-access-control-allow-origin" tabindex="-1">2. Access-Control-Allow-Origin <a class="header-anchor" href="#_2-access-control-allow-origin" aria-label="Permalink to &quot;2. Access-Control-Allow-Origin&quot;">​</a></h2><ul><li>作用: 控制跨域资源共享 (CORS)。</li><li>浏览器处理:</li><li>如果响应头中包含 Access-Control-Allow-Origin 且值为请求源（或 *），则允许跨域访问。</li><li>如果没有此头或值不匹配，浏览器会阻止跨域请求的响应数据读取（适用于 Fetch、XHR 等请求）。</li></ul><h2 id="_3-cache-control-在nginx上可以设置" tabindex="-1">3. Cache-Control（在<strong>nginx</strong>上可以设置） <a class="header-anchor" href="#_3-cache-control-在nginx上可以设置" aria-label="Permalink to &quot;3. Cache-Control（在**nginx**上可以设置）&quot;">​</a></h2><ul><li>作用: 控制浏览器的缓存行为。</li><li>浏览器处理:</li><li>Cache-Control: no-cache：强制浏览器每次都向服务器验证资源是否被更新。</li><li>Cache-Control: max-age=3600：浏览器会在本地缓存资源，缓存有效期为 3600 秒。</li><li>Cache-Control: no-store：浏览器不会缓存资源。</li></ul><h2 id="_4-content-disposition" tabindex="-1">4. Content-Disposition <a class="header-anchor" href="#_4-content-disposition" aria-label="Permalink to &quot;4. Content-Disposition&quot;">​</a></h2><ul><li>作用: 控制浏览器对内容的默认处理方式。</li><li>浏览器处理:</li><li>Content-Disposition: inline：内容将在浏览器中直接显示（默认行为）。</li><li>Content-Disposition: attachment; filename=&quot;example.txt&quot;：提示用户下载文件，并将文件命名为 example.txt。</li></ul><h2 id="_5-set-cookie" tabindex="-1">5. Set-Cookie <a class="header-anchor" href="#_5-set-cookie" aria-label="Permalink to &quot;5. Set-Cookie&quot;">​</a></h2><ul><li>作用: 设置客户端的 Cookie。</li><li>浏览器处理:</li><li>浏览器会保存服务器返回的 Cookie，并在后续请求中自动携带该 Cookie（如果域名和路径匹配）。</li><li>可配合 HttpOnly 防止客户端 JavaScript 访问 Cookie。</li><li>可配合 SameSite 控制 Cookie 的跨站请求行为。</li></ul><h2 id="_6-location" tabindex="-1">6. Location <a class="header-anchor" href="#_6-location" aria-label="Permalink to &quot;6. Location&quot;">​</a></h2><ul><li>作用: 指定重定向的目标地址。</li><li>浏览器处理:</li><li>如果状态码为 3xx（如 302 Found），浏览器会根据 Location 头的值自动重定向到指定地址。</li></ul>',13),n=[l];function r(c,s,d,h,p,_){return o(),i("div",null,n)}const x=e(a,[["render",r]]);export{C as __pageData,x as default};
