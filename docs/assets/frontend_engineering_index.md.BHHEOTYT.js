import{_ as t,c as o,o as n,V as e}from"./chunks/framework.CthfA3PS.js";const u=JSON.parse('{"title":"前端工程化","description":"","frontmatter":{"layout":"doc","title":"前端工程化","editLink":true},"headers":[],"relativePath":"frontend/engineering/index.md","filePath":"frontend/engineering/index.md","lastUpdated":1725799686000}'),i={name:"frontend/engineering/index.md"},r=e('<h6 id="前端工程化-chatgpt的解释是指将某一项技术、流程或操作系统化、标准化-使其更高效、可靠并易于大规模应用的过程。在软件开发中-工程化通常包括以下几个方面-模范化、自动化、模块化、持续集成与持续交付-ci-cd-、可维护性、质量保障。我个人的理解就是标准化-如同一个大学军训的方阵一样-大家采用统一的标准来输出-才能达到一个步调一致的动作出来。持续稳定的高质量的交付。后续整体-我主要是以以下的顺序来介绍-我在前端项目中做了哪些事。" tabindex="-1">前端工程化，chatgpt的解释是指将某一项技术、流程或操作系统化、标准化，使其更高效、可靠并易于大规模应用的过程。在软件开发中，工程化通常包括以下几个方面：模范化、自动化、模块化、持续集成与持续交付（CI/CD）、可维护性、质量保障。我个人的理解就是标准化，如同一个大学军训的方阵一样，大家采用统一的标准来输出，才能达到一个步调一致的动作出来。持续稳定的高质量的交付。后续整体，我主要是以以下的顺序来介绍，我在前端项目中做了哪些事。 <a class="header-anchor" href="#前端工程化-chatgpt的解释是指将某一项技术、流程或操作系统化、标准化-使其更高效、可靠并易于大规模应用的过程。在软件开发中-工程化通常包括以下几个方面-模范化、自动化、模块化、持续集成与持续交付-ci-cd-、可维护性、质量保障。我个人的理解就是标准化-如同一个大学军训的方阵一样-大家采用统一的标准来输出-才能达到一个步调一致的动作出来。持续稳定的高质量的交付。后续整体-我主要是以以下的顺序来介绍-我在前端项目中做了哪些事。" aria-label="Permalink to &quot;前端工程化，chatgpt的解释是指将某一项技术、流程或操作系统化、标准化，使其更高效、可靠并易于大规模应用的过程。在软件开发中，工程化通常包括以下几个方面：模范化、自动化、模块化、持续集成与持续交付（CI/CD）、可维护性、质量保障。我个人的理解就是标准化，如同一个大学军训的方阵一样，大家采用统一的标准来输出，才能达到一个步调一致的动作出来。持续稳定的高质量的交付。后续整体，我主要是以以下的顺序来介绍，我在前端项目中做了哪些事。&quot;">​</a></h6><hr><ol><li><strong>规范化</strong>：通过制定代码规范、文档标准、项目结构等，确保团队成员的开发工作一致性。</li><li><strong>模块化</strong>：将复杂的系统分解为独立的模块，便于开发、测试、维护和扩展。</li><li><strong>可维护性</strong>：通过良好的架构设计和编码规范，确保项目在后续的迭代中易于维护和扩展。</li><li><strong>质量保障</strong>：通过单元测试、集成测试等手段，保证代码质量。</li><li><strong>自动化</strong>：通过工具或脚本将手动的开发、测试、部署等流程自动化，以减少人为错误和重复劳动。</li><li><strong>持续集成与持续交付（<strong>CI</strong>/<strong>CD</strong>）</strong>：通过集成工具，自动化代码的集成、测试和部署，使得代码可以快速且高质量地交付。</li></ol><ul><li>规范化，主要是保障团队的开发环境一致。 <ul><li>编码规范化（环境：vscode，主要是使用vscode相关插件来约定编码规范）。</li><li><a href="./git.html">git commi</a>t的规范话，commit提交的规范化（方便从commit中知道每次的任务是什么，方便快速的code review）。</li><li>api规范化（与后端约定什么样的格式的api，方便前端抽离公共的axios封装的http request）。</li><li>项目结构的规范化。</li></ul></li><li>模块化，使用各种私有包管理平台，<strong>GitHub Packages</strong>、<strong>Nexus Repository (Sonatype)</strong>、<strong>Verdaccio</strong></li><li>可维护性，<strong>代码规范化</strong>、<strong>详细的注释和文档</strong>，其他就是<strong>单元测试和自动化测试</strong>、<strong>良好的代码结构和设计模式</strong>， 后面这两个主要是根据项目的特性（如公共工具需要写单元测试，业务项目一般不需要）和团队成员的能力的提升来加强（<strong>code review</strong>是一个重要的方式）。</li><li>质量保障，目前常用的就是公共的utils使用vitest来写自动化测试脚本和<code>code review</code>来保障代码的质量。</li><li>自动化，打包相关的<strong>gulp</strong>，<strong>webpack</strong>，<strong>vite</strong>等常用的，此处我还是希望可以使用统一的一个来实现，主要是方便维护和降低学习成本。</li><li>持续集成与持续交付（<strong>CI</strong>/<strong>CD</strong>），当前本blog使用的就是 <code>github action</code>,实际工作环境中使用的是<code>Jenkins</code>。</li></ul>',4),s=[r];function g(l,a,c,d,_,p){return n(),o("div",null,s)}const m=t(i,[["render",g]]);export{u as __pageData,m as default};
