import{_ as s,c as i,o as a,V as n}from"./chunks/framework.CsbsVE7l.js";const c=JSON.parse('{"title":"算法复杂度详解：时间复杂度 vs 空间复杂度","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/scene/algorithm-complexity.md","filePath":"frontend/scene/algorithm-complexity.md","lastUpdated":1757989705000}'),t={name:"frontend/scene/algorithm-complexity.md"},l=n(`<h1 id="算法复杂度详解-时间复杂度-vs-空间复杂度" tabindex="-1">算法复杂度详解：时间复杂度 vs 空间复杂度 <a class="header-anchor" href="#算法复杂度详解-时间复杂度-vs-空间复杂度" aria-label="Permalink to &quot;算法复杂度详解：时间复杂度 vs 空间复杂度&quot;">​</a></h1><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li><a href="#0-复杂度符号详解">0. 复杂度符号详解</a></li><li><a href="#1-时间复杂度详解">1. 时间复杂度详解</a></li><li><a href="#2-空间复杂度详解">2. 空间复杂度详解</a></li><li><a href="#3-实际性能测试对比">3. 实际性能测试对比</a></li><li><a href="#4-应用场景分析">4. 应用场景分析</a></li><li><a href="#5-实际代码示例">5. 实际代码示例</a></li><li><a href="#6-总结">6. 总结</a></li></ul><hr><h2 id="_0-复杂度符号详解" tabindex="-1">0. 复杂度符号详解 <a class="header-anchor" href="#_0-复杂度符号详解" aria-label="Permalink to &quot;0. 复杂度符号详解&quot;">​</a></h2><h3 id="大o符号-big-o-notation-的英文含义" tabindex="-1">大O符号 (Big O Notation) 的英文含义 <a class="header-anchor" href="#大o符号-big-o-notation-的英文含义" aria-label="Permalink to &quot;大O符号 (Big O Notation) 的英文含义&quot;">​</a></h3><p><strong>O</strong> = <strong>Order</strong> (阶、数量级)</p><ul><li><strong>英文单词</strong>: Order</li><li><strong>含义</strong>: 表示算法的数量级或阶数，描述算法性能随输入规模增长的趋势</li></ul><p><strong>n</strong> = <strong>Number</strong> (数量)</p><ul><li><strong>英文单词</strong>: Number</li><li><strong>含义</strong>: 表示输入数据的规模大小，通常指数组长度、元素个数等</li></ul><p><strong>k</strong> = <strong>Key</strong> (关键数量)</p><ul><li><strong>英文单词</strong>: Key</li><li><strong>含义</strong>: 表示某个特定的数量，如匹配次数、结果集大小等</li></ul><h3 id="完整英文单词对照表" tabindex="-1">完整英文单词对照表 <a class="header-anchor" href="#完整英文单词对照表" aria-label="Permalink to &quot;完整英文单词对照表&quot;">​</a></h3><table><thead><tr><th>符号</th><th>英文名称</th><th>中文含义</th><th>说明</th></tr></thead><tbody><tr><td><strong>O(1)</strong></td><td><strong>Constant Time</strong></td><td>常数时间</td><td>无论输入多大，执行时间固定</td></tr><tr><td><strong>O(n)</strong></td><td><strong>Linear Time</strong></td><td>线性时间</td><td>时间与输入规模成正比</td></tr><tr><td><strong>O(log n)</strong></td><td><strong>Logarithmic Time</strong></td><td>对数时间</td><td>时间与输入规模的对数成正比</td></tr><tr><td><strong>O(n²)</strong></td><td><strong>Quadratic Time</strong></td><td>平方时间</td><td>时间与输入规模的平方成正比</td></tr><tr><td><strong>O(k)</strong></td><td><strong>Key-dependent Space</strong></td><td>与关键数量相关</td><td>内存与特定数量成正比</td></tr></tbody></table><hr><h2 id="_1-时间复杂度详解" tabindex="-1">1. 时间复杂度详解 <a class="header-anchor" href="#_1-时间复杂度详解" aria-label="Permalink to &quot;1. 时间复杂度详解&quot;">​</a></h2><p><strong>定义：</strong> 算法执行时间随输入规模增长的趋势</p><h3 id="o-1-常数时间-constant-time" tabindex="-1">O(1) - 常数时间 (Constant Time) <a class="header-anchor" href="#o-1-常数时间-constant-time" aria-label="Permalink to &quot;O(1) - 常数时间 (Constant Time)&quot;">​</a></h3><p><strong>英文</strong>: Constant Time<br><strong>含义</strong>: 无论输入多大，执行时间固定</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：获取数组第一个元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getFirstElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只执行一次，不依赖数组长度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 特点：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 输入 [1,2,3,4,5] 和 [1,2,3,4,5,6,7,8,9,10] 执行时间相同</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 哈希表查找、数组索引访问、栈顶元素获取</span></span></code></pre></div><h3 id="o-n-线性时间-linear-time" tabindex="-1">O(n) - 线性时间 (Linear Time) <a class="header-anchor" href="#o-n-线性时间-linear-time" aria-label="Permalink to &quot;O(n) - 线性时间 (Linear Time)&quot;">​</a></h3><p><strong>英文</strong>: Linear Time<br><strong>含义</strong>: 时间与输入规模成正比</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：线性搜索</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> linearSearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 循环 n 次</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 特点：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 数组长度 1000 → 最多循环 1000 次</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 数组长度 2000 → 最多循环 2000 次</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 线性搜索、遍历数组、单链表操作</span></span></code></pre></div><h3 id="o-n2-平方时间-quadratic-time" tabindex="-1">O(n²) - 平方时间 (Quadratic Time) <a class="header-anchor" href="#o-n2-平方时间-quadratic-time" aria-label="Permalink to &quot;O(n²) - 平方时间 (Quadratic Time)&quot;">​</a></h3><p><strong>英文</strong>: Quadratic Time<br><strong>含义</strong>: 时间与输入规模的平方成正比</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：冒泡排序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bubbleSort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 外层循环 n 次</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 内层循环 n 次</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (arr[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [arr[j], arr[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [arr[j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], arr[j]]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 交换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 特点：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 数组长度 100 → 最多 10,000 次操作</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 数组长度 200 → 最多 40,000 次操作</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 冒泡排序、选择排序、简单图算法</span></span></code></pre></div><h3 id="o-log-n-对数时间-logarithmic-time" tabindex="-1">O(log n) - 对数时间 (Logarithmic Time) <a class="header-anchor" href="#o-log-n-对数时间-logarithmic-time" aria-label="Permalink to &quot;O(log n) - 对数时间 (Logarithmic Time)&quot;">​</a></h3><p><strong>英文</strong>: Logarithmic Time<br><strong>含义</strong>: 时间与输入规模的对数成正比</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：二分搜索</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> binarySearch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (arr[mid] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mid;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (arr[mid] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target) left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 特点：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 数组长度 1000 → 最多 10 次比较</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 数组长度 10000 → 最多 14 次比较</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 二分搜索、平衡二叉搜索树、堆操作</span></span></code></pre></div><hr><h2 id="_2-空间复杂度详解" tabindex="-1">2. 空间复杂度详解 <a class="header-anchor" href="#_2-空间复杂度详解" aria-label="Permalink to &quot;2. 空间复杂度详解&quot;">​</a></h2><p><strong>定义：</strong> 算法执行过程中使用的额外内存空间随输入规模增长的趋势</p><h3 id="o-1-常数空间-constant-space" tabindex="-1">O(1) - 常数空间 (Constant Space) <a class="header-anchor" href="#o-1-常数空间-constant-space" aria-label="Permalink to &quot;O(1) - 常数空间 (Constant Space)&quot;">​</a></h3><p><strong>英文</strong>: Constant Space<br><strong>含义</strong>: 无论输入多大，内存使用固定</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：两数相加</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只使用几个变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 特点：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 无论 a 和 b 多大，都只使用固定内存</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 原地排序、数学计算、简单变量操作</span></span></code></pre></div><h3 id="o-n-线性空间-linear-space" tabindex="-1">O(n) - 线性空间 (Linear Space) <a class="header-anchor" href="#o-n-线性空间-linear-space" aria-label="Permalink to &quot;O(n) - 线性空间 (Linear Space)&quot;">​</a></h3><p><strong>英文</strong>: Linear Space<br><strong>含义</strong>: 内存与输入规模成正比</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：复制数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> copyArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> newArr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建新数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    newArr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[i]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 复制每个元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newArr;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 特点：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 原数组长度 1000 → 新数组长度 1000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 原数组长度 2000 → 新数组长度 2000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 数组复制、缓存存储、队列实现</span></span></code></pre></div><h3 id="o-k-与特定数量成正比-key-dependent-space" tabindex="-1">O(k) - 与特定数量成正比 (Key-dependent Space) <a class="header-anchor" href="#o-k-与特定数量成正比-key-dependent-space" aria-label="Permalink to &quot;O(k) - 与特定数量成正比 (Key-dependent Space)&quot;">​</a></h3><p><strong>英文</strong>: Key-dependent Space<br><strong>含义</strong>: 内存与特定数量成正比</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：查找偶数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findEvenNumbers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> evenNumbers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数组大小取决于偶数个数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      evenNumbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[i]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> evenNumbers;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 特点：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 如果数组中有 50 个偶数 → 结果数组长度 50</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 如果数组中有 100 个偶数 → 结果数组长度 100</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 动态数组、结果集存储</span></span></code></pre></div><h3 id="o-n2-平方空间-quadratic-space" tabindex="-1">O(n²) - 平方空间 (Quadratic Space) <a class="header-anchor" href="#o-n2-平方空间-quadratic-space" aria-label="Permalink to &quot;O(n²) - 平方空间 (Quadratic Space)&quot;">​</a></h3><p><strong>英文</strong>: Quadratic Space<br><strong>含义</strong>: 内存与输入规模的平方成正比</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：创建 n×n 矩阵</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> matrix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    matrix[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      matrix[i][j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建 n×n 矩阵</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matrix;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 特点：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - n=10 → 100 个元素</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - n=20 → 400 个元素</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// - 邻接矩阵、二维DP表</span></span></code></pre></div><p>此处有一个经典的用例，多重for循环的时间开销，比如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>function testLoops(outer, inner, label) {</span></span>
<span class="line"><span> console.time(label);</span></span>
<span class="line"><span> let sum = 0;</span></span>
<span class="line"><span> for (let i = 0; i &lt; outer; i++) {</span></span>
<span class="line"><span>   for (let j = 0; j &lt; inner; j++) {</span></span>
<span class="line"><span>     sum += i * j;</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span> }</span></span>
<span class="line"><span> console.timeEnd(label);</span></span>
<span class="line"><span> return sum; // 防止引擎优化掉循环</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const big = 1_000_000;  // ES2021 标准语法（数字分隔符语法）  大次数</span></span>
<span class="line"><span>const small = 100;      // 小次数</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 情况A：大的次数在外层</span></span>
<span class="line"><span>testLoops(big, small, &quot;大在外&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 情况B：大的次数在内层</span></span>
<span class="line"><span>testLoops(small, big, &quot;大在内&quot;);</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>打开下方链接，打开浏览器的开发者模式，运行，可以看到运行结果 <a href="https://jsfiddle.net/krui027/gfx23mpk/" target="_blank" rel="noreferrer">https://jsfiddle.net/krui027/gfx23mpk/</a></p><p>大在外: 100.35400390625 ms</p><p>大在内: 90.625 ms</p><p>数字分隔符语法：<a href="https://caniuse.com/numeric-separator" target="_blank" rel="noreferrer">https://caniuse.com/numeric-separator</a></p></div><hr><h2 id="_4-应用场景分析" tabindex="-1">4. 应用场景分析 <a class="header-anchor" href="#_4-应用场景分析" aria-label="Permalink to &quot;4. 应用场景分析&quot;">​</a></h2><h3 id="时间复杂度应用场景" tabindex="-1">时间复杂度应用场景 <a class="header-anchor" href="#时间复杂度应用场景" aria-label="Permalink to &quot;时间复杂度应用场景&quot;">​</a></h3><table><thead><tr><th>复杂度</th><th>英文名称</th><th>应用场景</th><th>示例</th></tr></thead><tbody><tr><td>O(1)</td><td>Constant Time</td><td>哈希表查找、数组索引访问</td><td><code>hashMap.get(key)</code></td></tr><tr><td>O(log n)</td><td>Logarithmic Time</td><td>二分搜索、平衡二叉搜索树</td><td><code>binarySearch(sortedArray, target)</code></td></tr><tr><td>O(n)</td><td>Linear Time</td><td>线性搜索、遍历数组</td><td><code>array.forEach()</code></td></tr><tr><td>O(n log n)</td><td>Linearithmic Time</td><td>归并排序、快速排序</td><td><code>mergeSort(array)</code></td></tr><tr><td>O(n²)</td><td>Quadratic Time</td><td>冒泡排序、选择排序</td><td><code>bubbleSort(array)</code></td></tr><tr><td>O(2^n)</td><td>Exponential Time</td><td>递归斐波那契、子集生成</td><td><code>fibonacci(n)</code></td></tr></tbody></table><h3 id="空间复杂度应用场景" tabindex="-1">空间复杂度应用场景 <a class="header-anchor" href="#空间复杂度应用场景" aria-label="Permalink to &quot;空间复杂度应用场景&quot;">​</a></h3><table><thead><tr><th>复杂度</th><th>英文名称</th><th>应用场景</th><th>示例</th></tr></thead><tbody><tr><td>O(1)</td><td>Constant Space</td><td>原地排序、数学计算</td><td><code>swap(a, b)</code></td></tr><tr><td>O(log n)</td><td>Logarithmic Space</td><td>递归调用栈</td><td><code>quickSort(arr, left, right)</code></td></tr><tr><td>O(n)</td><td>Linear Space</td><td>数组复制、缓存存储</td><td><code>[...originalArray]</code></td></tr><tr><td>O(n log n)</td><td>Linearithmic Space</td><td>归并排序的临时数组</td><td><code>mergeSort</code> 的辅助数组</td></tr><tr><td>O(n²)</td><td>Quadratic Space</td><td>邻接矩阵、二维DP表</td><td><code>dp[i][j]</code> 表格</td></tr></tbody></table><hr><h2 id="_6-总结" tabindex="-1">6. 总结 <a class="header-anchor" href="#_6-总结" aria-label="Permalink to &quot;6. 总结&quot;">​</a></h2><h3 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h3><ul><li><strong>时间复杂度</strong>：关注执行效率，用户体验的关键</li><li><strong>空间复杂度</strong>：关注内存使用，硬件资源的限制</li></ul><h3 id="选择原则" tabindex="-1">选择原则 <a class="header-anchor" href="#选择原则" aria-label="Permalink to &quot;选择原则&quot;">​</a></h3><ol><li><strong>优先考虑时间复杂度</strong>（用户体验）</li><li><strong>在时间复杂度和空间复杂度之间权衡</strong></li><li><strong>根据数据规模选择合适的算法</strong></li><li><strong>考虑硬件资源限制</strong>（内存、CPU）</li><li><strong>分析实际使用场景的频率和重要性</strong></li></ol><h3 id="优化策略" tabindex="-1">优化策略 <a class="header-anchor" href="#优化策略" aria-label="Permalink to &quot;优化策略&quot;">​</a></h3><ul><li><strong>时间换空间</strong>：使用更多内存来减少计算时间</li><li><strong>空间换时间</strong>：使用更多计算来减少内存使用</li><li><strong>预处理</strong>：提前计算常用结果</li><li><strong>缓存</strong>：存储中间结果避免重复计算</li><li><strong>分治</strong>：将大问题分解为小问题</li></ul><h3 id="实际开发建议" tabindex="-1">实际开发建议 <a class="header-anchor" href="#实际开发建议" aria-label="Permalink to &quot;实际开发建议&quot;">​</a></h3><ol><li><strong>小数据量</strong>：优先考虑代码简洁性</li><li><strong>大数据量</strong>：优先考虑算法效率</li><li><strong>高频调用</strong>：重点优化时间复杂度</li><li><strong>内存受限</strong>：重点优化空间复杂度</li><li><strong>实时系统</strong>：严格限制时间复杂度</li></ol><hr><p><em>记住：没有完美的算法，只有适合场景的算法！</em></p>`,65),h=[l];function p(k,e,r,d,g,E){return a(),i("div",null,h)}const y=s(t,[["render",p]]);export{c as __pageData,y as default};
