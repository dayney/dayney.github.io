import{_ as i,c as t,o as s,V as l,m as e}from"./chunks/framework.CsbsVE7l.js";const f=JSON.parse('{"title":"Vue3 性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/index/javascript/vue3/performance-optimization.md","filePath":"frontend/index/javascript/vue3/performance-optimization.md","lastUpdated":1748791719000}'),o={name:"frontend/index/javascript/vue3/performance-optimization.md"},n=l(`<h1 id="vue3-性能优化" tabindex="-1">Vue3 性能优化 <a class="header-anchor" href="#vue3-性能优化" aria-label="Permalink to &quot;Vue3 性能优化&quot;">​</a></h1><h2 id="_1-composition-api-优化" tabindex="-1">1. Composition API 优化 <a class="header-anchor" href="#_1-composition-api-优化" aria-label="Permalink to &quot;1. Composition API 优化&quot;">​</a></h2><ul><li>利用 <code>ref</code>、<code>reactive</code> 精细化响应式粒度，减少不必要的依赖收集。</li><li>使用 <code>shallowRef</code>、<code>markRaw</code> 优化大型对象响应式。</li></ul><h2 id="_2-v-if-v-show-与列表优化" tabindex="-1">2. v-if/v-show 与列表优化 <a class="header-anchor" href="#_2-v-if-v-show-与列表优化" aria-label="Permalink to &quot;2. v-if/v-show 与列表优化&quot;">​</a></h2><ul><li>合理选择 <code>v-if</code>/<code>v-show</code>，同 Vue2。</li><li>列表渲染时使用唯一 <code>key</code>，大数据量用虚拟滚动。</li></ul><h2 id="_3-异步组件与-suspense" tabindex="-1">3. 异步组件与 Suspense <a class="header-anchor" href="#_3-异步组件与-suspense" aria-label="Permalink to &quot;3. 异步组件与 Suspense&quot;">​</a></h2><ul><li>使用 <code>defineAsyncComponent</code> 实现异步加载：<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineAsyncComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AsyncComp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineAsyncComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./AsyncComp.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div></li><li>利用 <code>&lt;Suspense&gt;</code> 处理异步组件加载状态。</li></ul><h2 id="_4-teleport-keepalive-fragment" tabindex="-1">4. Teleport/KeepAlive/Fragment <a class="header-anchor" href="#_4-teleport-keepalive-fragment" aria-label="Permalink to &quot;4. Teleport/KeepAlive/Fragment&quot;">​</a></h2><ul><li>使用 <code>&lt;Teleport&gt;</code> 优化弹窗等场景的 DOM 层级。</li><li><code>&lt;KeepAlive&gt;</code> 缓存组件，提升切换性能。</li><li><code>&lt;Fragment&gt;</code> 避免多余 DOM 包裹。</li></ul><h2 id="_5-静态提升与编译优化" tabindex="-1">5. 静态提升与编译优化 <a class="header-anchor" href="#_5-静态提升与编译优化" aria-label="Permalink to &quot;5. 静态提升与编译优化&quot;">​</a></h2><ul><li>Vue3 编译器自动静态提升，减少运行时开销。</li><li>使用 <code>v-once</code> 渲染静态内容。</li></ul><h2 id="_6-事件与内存管理" tabindex="-1">6. 事件与内存管理 <a class="header-anchor" href="#_6-事件与内存管理" aria-label="Permalink to &quot;6. 事件与内存管理&quot;">​</a></h2><ul><li>及时解绑事件、清理副作用，使用 <code>onUnmounted</code>。</li></ul><h2 id="_7-代码分割与懒加载" tabindex="-1">7. 代码分割与懒加载 <a class="header-anchor" href="#_7-代码分割与懒加载" aria-label="Permalink to &quot;7. 代码分割与懒加载&quot;">​</a></h2><ul><li>路由和组件均支持动态 import。</li></ul><h2 id="_8-经典案例与参考" tabindex="-1">8. 经典案例与参考 <a class="header-anchor" href="#_8-经典案例与参考" aria-label="Permalink to &quot;8. 经典案例与参考&quot;">​</a></h2>`,16),r=["target"],h=["target"];function d(a,p,c,u,k,m){return s(),t("div",null,[n,e("ul",null,[e("li",null,[e("a",{href:"https://cn.vuejs.org/guide/best-practices/performance.html",target:a._blank,rel:"noreferrer"},"Vue3 官方性能优化指南",8,r)]),e("li",null,[e("a",{href:"https://juejin.cn/post/6983905960328069128",target:a._blank,rel:"noreferrer"},"Vue3 性能优化实战",8,h)])])])}const g=i(o,[["render",d]]);export{f as __pageData,g as default};
