import{_ as e,c as a,o,V as r}from"./chunks/framework.CsbsVE7l.js";const m=JSON.parse('{"title":"JavaScript最佳实践","description":"","frontmatter":{"outline":"deep","editLink":false},"headers":[],"relativePath":"frontend/index/guide/coding-standards/javascript-best-practices.md","filePath":"frontend/index/guide/coding-standards/javascript-best-practices.md","lastUpdated":1748791719000}'),t={name:"frontend/index/guide/coding-standards/javascript-best-practices.md"},d=r('<h1 id="javascript最佳实践" tabindex="-1">JavaScript最佳实践 <a class="header-anchor" href="#javascript最佳实践" aria-label="Permalink to &quot;JavaScript最佳实践&quot;">​</a></h1><h2 id="_1-变量" tabindex="-1">1. 变量 <a class="header-anchor" href="#_1-变量" aria-label="Permalink to &quot;1. 变量&quot;">​</a></h2><h5 id="强制-变量在使用前必须通过-var-定义。" tabindex="-1">[强制] 变量在使用前必须通过 <code>var</code> 定义。 <a class="header-anchor" href="#强制-变量在使用前必须通过-var-定义。" aria-label="Permalink to &quot;[强制] 变量在使用前必须通过 `var` 定义。&quot;">​</a></h5><h5 id="强制-每个-var-只能声明一个变量。" tabindex="-1">[强制] 每个 <code>var</code> 只能声明一个变量。 <a class="header-anchor" href="#强制-每个-var-只能声明一个变量。" aria-label="Permalink to &quot;[强制] 每个 `var` 只能声明一个变量。&quot;">​</a></h5><h5 id="强制-变量必须-即用即声明-不得在函数或其它形式的代码块起始位置统一声明所有变量。" tabindex="-1">[强制] 变量必须 <code>即用即声明</code>，不得在函数或其它形式的代码块起始位置统一声明所有变量。 <a class="header-anchor" href="#强制-变量必须-即用即声明-不得在函数或其它形式的代码块起始位置统一声明所有变量。" aria-label="Permalink to &quot;[强制] 变量必须 `即用即声明`，不得在函数或其它形式的代码块起始位置统一声明所有变量。&quot;">​</a></h5><h2 id="_2-条件" tabindex="-1">2. 条件 <a class="header-anchor" href="#_2-条件" aria-label="Permalink to &quot;2. 条件&quot;">​</a></h2><h5 id="强制-在-equality-expression-中使用类型严格的-。仅当判断-null-或-undefined-时-允许使用-null。" tabindex="-1">[强制] 在 Equality Expression 中使用类型严格的 <code>===</code>。仅当判断 null 或 undefined 时，允许使用 <code>== null</code>。 <a class="header-anchor" href="#强制-在-equality-expression-中使用类型严格的-。仅当判断-null-或-undefined-时-允许使用-null。" aria-label="Permalink to &quot;[强制] 在 Equality Expression 中使用类型严格的 `===`。仅当判断 null 或 undefined 时，允许使用 `== null`。&quot;">​</a></h5><h5 id="建议-尽可能使用简洁的表达式。" tabindex="-1">[建议] 尽可能使用简洁的表达式。 <a class="header-anchor" href="#建议-尽可能使用简洁的表达式。" aria-label="Permalink to &quot;[建议] 尽可能使用简洁的表达式。&quot;">​</a></h5><h5 id="建议-按执行频率排列分支的顺序。" tabindex="-1">[建议] 按执行频率排列分支的顺序。 <a class="header-anchor" href="#建议-按执行频率排列分支的顺序。" aria-label="Permalink to &quot;[建议] 按执行频率排列分支的顺序。&quot;">​</a></h5><h5 id="建议-对于相同变量或表达式的多值条件-用-switch-代替-if。" tabindex="-1">[建议] 对于相同变量或表达式的多值条件，用 <code>switch</code> 代替 <code>if</code>。 <a class="header-anchor" href="#建议-对于相同变量或表达式的多值条件-用-switch-代替-if。" aria-label="Permalink to &quot;[建议] 对于相同变量或表达式的多值条件，用 `switch` 代替 `if`。&quot;">​</a></h5><h5 id="建议-如果函数或全局中的-else-块后没有任何语句-可以删除-else。" tabindex="-1">[建议] 如果函数或全局中的 <code>else</code> 块后没有任何语句，可以删除 <code>else</code>。 <a class="header-anchor" href="#建议-如果函数或全局中的-else-块后没有任何语句-可以删除-else。" aria-label="Permalink to &quot;[建议] 如果函数或全局中的 `else` 块后没有任何语句，可以删除 `else`。&quot;">​</a></h5><h2 id="_3-循环" tabindex="-1">3. 循环 <a class="header-anchor" href="#_3-循环" aria-label="Permalink to &quot;3. 循环&quot;">​</a></h2><h5 id="建议-不要在循环体中包含函数表达式-事先将函数提取到循环体外。" tabindex="-1">[建议] 不要在循环体中包含函数表达式，事先将函数提取到循环体外。 <a class="header-anchor" href="#建议-不要在循环体中包含函数表达式-事先将函数提取到循环体外。" aria-label="Permalink to &quot;[建议] 不要在循环体中包含函数表达式，事先将函数提取到循环体外。&quot;">​</a></h5><h5 id="建议-对循环内多次使用的不变值-在循环外用变量缓存。" tabindex="-1">[建议] 对循环内多次使用的不变值，在循环外用变量缓存。 <a class="header-anchor" href="#建议-对循环内多次使用的不变值-在循环外用变量缓存。" aria-label="Permalink to &quot;[建议] 对循环内多次使用的不变值，在循环外用变量缓存。&quot;">​</a></h5><h5 id="建议-对有序集合进行遍历时-缓存-length。" tabindex="-1">[建议] 对有序集合进行遍历时，缓存 <code>length</code>。 <a class="header-anchor" href="#建议-对有序集合进行遍历时-缓存-length。" aria-label="Permalink to &quot;[建议] 对有序集合进行遍历时，缓存 `length`。&quot;">​</a></h5><h5 id="建议-对有序集合进行顺序无关的遍历时-使用逆序遍历。" tabindex="-1">[建议] 对有序集合进行顺序无关的遍历时，使用逆序遍历。 <a class="header-anchor" href="#建议-对有序集合进行顺序无关的遍历时-使用逆序遍历。" aria-label="Permalink to &quot;[建议] 对有序集合进行顺序无关的遍历时，使用逆序遍历。&quot;">​</a></h5><h2 id="_4-类型" tabindex="-1">4. 类型 <a class="header-anchor" href="#_4-类型" aria-label="Permalink to &quot;4. 类型&quot;">​</a></h2><h3 id="_4-1-类型检测" tabindex="-1">4.1 类型检测 <a class="header-anchor" href="#_4-1-类型检测" aria-label="Permalink to &quot;4.1 类型检测&quot;">​</a></h3><h5 id="建议-类型检测优先使用-typeof。对象类型检测使用-instanceof。null-或-undefined-的检测使用-null。" tabindex="-1">[建议] 类型检测优先使用 <code>typeof</code>。对象类型检测使用 <code>instanceof</code>。<code>null</code> 或 <code>undefined</code> 的检测使用 <code>== null</code>。 <a class="header-anchor" href="#建议-类型检测优先使用-typeof。对象类型检测使用-instanceof。null-或-undefined-的检测使用-null。" aria-label="Permalink to &quot;[建议] 类型检测优先使用 `typeof`。对象类型检测使用 `instanceof`。`null` 或 `undefined` 的检测使用 `== null`。&quot;">​</a></h5><h3 id="_4-2-类型转换" tabindex="-1">4.2 类型转换 <a class="header-anchor" href="#_4-2-类型转换" aria-label="Permalink to &quot;4.2 类型转换&quot;">​</a></h3><h5 id="建议-转换成-string-时-使用-。" tabindex="-1">[建议] 转换成 <code>string</code> 时，使用 <code>+ &#39;&#39;</code>。 <a class="header-anchor" href="#建议-转换成-string-时-使用-。" aria-label="Permalink to &quot;[建议] 转换成 `string` 时，使用 `+ &#39;&#39;`。&quot;">​</a></h5><h5 id="建议-转换成-number-时-通常使用-。" tabindex="-1">[建议] 转换成 <code>number</code> 时，通常使用 <code>+</code>。 <a class="header-anchor" href="#建议-转换成-number-时-通常使用-。" aria-label="Permalink to &quot;[建议] 转换成 `number` 时，通常使用 `+`。&quot;">​</a></h5><h5 id="建议-string-转换成-number-要转换的字符串结尾包含非数字并期望忽略时-使用-parseint。" tabindex="-1">[建议] <code>string</code> 转换成 <code>number</code>，要转换的字符串结尾包含非数字并期望忽略时，使用 <code>parseInt</code>。 <a class="header-anchor" href="#建议-string-转换成-number-要转换的字符串结尾包含非数字并期望忽略时-使用-parseint。" aria-label="Permalink to &quot;[建议] `string` 转换成 `number`，要转换的字符串结尾包含非数字并期望忽略时，使用 `parseInt`。&quot;">​</a></h5><h5 id="强制-使用-parseint-时-必须指定进制。" tabindex="-1">[强制] 使用 <code>parseInt</code> 时，必须指定进制。 <a class="header-anchor" href="#强制-使用-parseint-时-必须指定进制。" aria-label="Permalink to &quot;[强制] 使用 `parseInt` 时，必须指定进制。&quot;">​</a></h5><h5 id="建议-转换成-boolean-时-使用-。" tabindex="-1">[建议] 转换成 <code>boolean</code> 时，使用 <code>!!</code>。 <a class="header-anchor" href="#建议-转换成-boolean-时-使用-。" aria-label="Permalink to &quot;[建议] 转换成 `boolean` 时，使用 `!!`。&quot;">​</a></h5><h5 id="建议-number-去除小数点-使用-math-floor-math-round-math-ceil-不使用-parseint。" tabindex="-1">[建议] <code>number</code> 去除小数点，使用 <code>Math.floor / Math.round / Math.ceil</code>，不使用 <code>parseInt</code>。 <a class="header-anchor" href="#建议-number-去除小数点-使用-math-floor-math-round-math-ceil-不使用-parseint。" aria-label="Permalink to &quot;[建议] `number` 去除小数点，使用 `Math.floor / Math.round / Math.ceil`，不使用 `parseInt`。&quot;">​</a></h5><h2 id="_5-字符串" tabindex="-1">5. 字符串 <a class="header-anchor" href="#_5-字符串" aria-label="Permalink to &quot;5. 字符串&quot;">​</a></h2><h5 id="强制-字符串开头和结束使用单引号-。" tabindex="-1">[强制] 字符串开头和结束使用单引号 <code>&#39;</code>。 <a class="header-anchor" href="#强制-字符串开头和结束使用单引号-。" aria-label="Permalink to &quot;[强制] 字符串开头和结束使用单引号 `&#39;`。&quot;">​</a></h5><h5 id="建议-使用-数组-或-拼接字符串。" tabindex="-1">[建议] 使用 <code>数组</code> 或 <code>+</code> 拼接字符串。 <a class="header-anchor" href="#建议-使用-数组-或-拼接字符串。" aria-label="Permalink to &quot;[建议] 使用 `数组` 或 `+` 拼接字符串。&quot;">​</a></h5><h5 id="建议-复杂的数据到视图字符串的转换过程-选用一种模板引擎。" tabindex="-1">[建议] 复杂的数据到视图字符串的转换过程，选用一种模板引擎。 <a class="header-anchor" href="#建议-复杂的数据到视图字符串的转换过程-选用一种模板引擎。" aria-label="Permalink to &quot;[建议] 复杂的数据到视图字符串的转换过程，选用一种模板引擎。&quot;">​</a></h5><h2 id="_6-对象" tabindex="-1">6. 对象 <a class="header-anchor" href="#_6-对象" aria-label="Permalink to &quot;6. 对象&quot;">​</a></h2><h5 id="强制-使用对象字面量-创建新-object。" tabindex="-1">[强制] 使用对象字面量 <code>{}</code> 创建新 <code>Object</code>。 <a class="header-anchor" href="#强制-使用对象字面量-创建新-object。" aria-label="Permalink to &quot;[强制] 使用对象字面量 `{}` 创建新 `Object`。&quot;">​</a></h5><h5 id="强制-对象创建时-如果一个对象的所有-属性-均可以不添加引号-则所有-属性-不得添加引号。" tabindex="-1">[强制] 对象创建时，如果一个对象的所有 <code>属性</code> 均可以不添加引号，则所有 <code>属性</code> 不得添加引号。 <a class="header-anchor" href="#强制-对象创建时-如果一个对象的所有-属性-均可以不添加引号-则所有-属性-不得添加引号。" aria-label="Permalink to &quot;[强制] 对象创建时，如果一个对象的所有 `属性` 均可以不添加引号，则所有 `属性` 不得添加引号。&quot;">​</a></h5><h5 id="强制-对象创建时-如果任何一个-属性-需要添加引号-则所有-属性-必须添加-。" tabindex="-1">[强制] 对象创建时，如果任何一个 <code>属性</code> 需要添加引号，则所有 <code>属性</code> 必须添加 <code>&#39;</code>。 <a class="header-anchor" href="#强制-对象创建时-如果任何一个-属性-需要添加引号-则所有-属性-必须添加-。" aria-label="Permalink to &quot;[强制] 对象创建时，如果任何一个 `属性` 需要添加引号，则所有 `属性` 必须添加 `&#39;`。&quot;">​</a></h5><h5 id="强制-不允许修改和扩展任何原生对象和宿主对象的原型。" tabindex="-1">[强制] 不允许修改和扩展任何原生对象和宿主对象的原型。 <a class="header-anchor" href="#强制-不允许修改和扩展任何原生对象和宿主对象的原型。" aria-label="Permalink to &quot;[强制] 不允许修改和扩展任何原生对象和宿主对象的原型。&quot;">​</a></h5><h5 id="建议-属性访问时-尽量使用-。" tabindex="-1">[建议] 属性访问时，尽量使用 <code>.</code>。 <a class="header-anchor" href="#建议-属性访问时-尽量使用-。" aria-label="Permalink to &quot;[建议] 属性访问时，尽量使用 `.`。&quot;">​</a></h5><h5 id="建议-for-in-遍历对象时-使用-hasownproperty-过滤掉原型中的属性。" tabindex="-1">[建议] <code>for in</code> 遍历对象时, 使用 <code>hasOwnProperty</code> 过滤掉原型中的属性。 <a class="header-anchor" href="#建议-for-in-遍历对象时-使用-hasownproperty-过滤掉原型中的属性。" aria-label="Permalink to &quot;[建议] `for in` 遍历对象时, 使用 `hasOwnProperty` 过滤掉原型中的属性。&quot;">​</a></h5><h2 id="_7-数组" tabindex="-1">7. 数组 <a class="header-anchor" href="#_7-数组" aria-label="Permalink to &quot;7. 数组&quot;">​</a></h2><h5 id="强制-使用数组字面量-创建新数组-除非想要创建的是指定长度的数组。" tabindex="-1">[强制] 使用数组字面量 <code>[]</code> 创建新数组，除非想要创建的是指定长度的数组。 <a class="header-anchor" href="#强制-使用数组字面量-创建新数组-除非想要创建的是指定长度的数组。" aria-label="Permalink to &quot;[强制] 使用数组字面量 `[]` 创建新数组，除非想要创建的是指定长度的数组。&quot;">​</a></h5><h5 id="强制-遍历数组不使用-for-in。" tabindex="-1">[强制] 遍历数组不使用 <code>for in</code>。 <a class="header-anchor" href="#强制-遍历数组不使用-for-in。" aria-label="Permalink to &quot;[强制] 遍历数组不使用 `for in`。&quot;">​</a></h5><h5 id="建议-不因为性能的原因自己实现数组排序功能-尽量使用数组的-sort-方法。" tabindex="-1">[建议] 不因为性能的原因自己实现数组排序功能，尽量使用数组的 <code>sort</code> 方法。 <a class="header-anchor" href="#建议-不因为性能的原因自己实现数组排序功能-尽量使用数组的-sort-方法。" aria-label="Permalink to &quot;[建议] 不因为性能的原因自己实现数组排序功能，尽量使用数组的 `sort` 方法。&quot;">​</a></h5><h5 id="建议-清空数组使用-length-0。" tabindex="-1">[建议] 清空数组使用 <code>.length = 0</code>。 <a class="header-anchor" href="#建议-清空数组使用-length-0。" aria-label="Permalink to &quot;[建议] 清空数组使用 `.length = 0`。&quot;">​</a></h5><h2 id="_8-函数" tabindex="-1">8. 函数 <a class="header-anchor" href="#_8-函数" aria-label="Permalink to &quot;8. 函数&quot;">​</a></h2><h3 id="_8-1-函数长度" tabindex="-1">8.1 函数长度 <a class="header-anchor" href="#_8-1-函数长度" aria-label="Permalink to &quot;8.1 函数长度&quot;">​</a></h3><h5 id="建议-一个函数的长度控制在-50-行以内。" tabindex="-1">[建议] 一个函数的长度控制在 <code>50</code> 行以内。 <a class="header-anchor" href="#建议-一个函数的长度控制在-50-行以内。" aria-label="Permalink to &quot;[建议] 一个函数的长度控制在 `50` 行以内。&quot;">​</a></h5><h3 id="_8-2-参数设计" tabindex="-1">8.2 参数设计 <a class="header-anchor" href="#_8-2-参数设计" aria-label="Permalink to &quot;8.2 参数设计&quot;">​</a></h3><h5 id="建议-一个函数的参数控制在-6-个以内。" tabindex="-1">[建议] 一个函数的参数控制在 <code>6</code> 个以内。 <a class="header-anchor" href="#建议-一个函数的参数控制在-6-个以内。" aria-label="Permalink to &quot;[建议] 一个函数的参数控制在 `6` 个以内。&quot;">​</a></h5><h5 id="建议-通过-options-参数传递非数据输入型参数。" tabindex="-1">[建议] 通过 <code>options</code> 参数传递非数据输入型参数。 <a class="header-anchor" href="#建议-通过-options-参数传递非数据输入型参数。" aria-label="Permalink to &quot;[建议] 通过 `options` 参数传递非数据输入型参数。&quot;">​</a></h5><h3 id="_8-3-闭包" tabindex="-1">8.3 闭包 <a class="header-anchor" href="#_8-3-闭包" aria-label="Permalink to &quot;8.3 闭包&quot;">​</a></h3><h5 id="建议-在适当的时候将闭包内大对象置为-null。" tabindex="-1">[建议] 在适当的时候将闭包内大对象置为 <code>null</code>。 <a class="header-anchor" href="#建议-在适当的时候将闭包内大对象置为-null。" aria-label="Permalink to &quot;[建议] 在适当的时候将闭包内大对象置为 `null`。&quot;">​</a></h5><h5 id="建议-使用-iife-避免-lift-效应。" tabindex="-1">[建议] 使用 <code>IIFE</code> 避免 <code>Lift 效应</code>。 <a class="header-anchor" href="#建议-使用-iife-避免-lift-效应。" aria-label="Permalink to &quot;[建议] 使用 `IIFE` 避免 `Lift 效应`。&quot;">​</a></h5><h3 id="_8-4-空函数" tabindex="-1">8.4 空函数 <a class="header-anchor" href="#_8-4-空函数" aria-label="Permalink to &quot;8.4 空函数&quot;">​</a></h3><h5 id="建议-空函数不使用-new-function-的形式。" tabindex="-1">[建议] 空函数不使用 <code>new Function()</code> 的形式。 <a class="header-anchor" href="#建议-空函数不使用-new-function-的形式。" aria-label="Permalink to &quot;[建议] 空函数不使用 `new Function()` 的形式。&quot;">​</a></h5><h5 id="建议-对于性能有高要求的场合-建议存在一个空函数的常量-供多处使用共享。" tabindex="-1">[建议] 对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。 <a class="header-anchor" href="#建议-对于性能有高要求的场合-建议存在一个空函数的常量-供多处使用共享。" aria-label="Permalink to &quot;[建议] 对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。&quot;">​</a></h5><h2 id="_9-面向对象" tabindex="-1">9. 面向对象 <a class="header-anchor" href="#_9-面向对象" aria-label="Permalink to &quot;9. 面向对象&quot;">​</a></h2><h5 id="强制-类的继承方案-实现时需要修正-constructor。" tabindex="-1">[强制] 类的继承方案，实现时需要修正 <code>constructor</code>。 <a class="header-anchor" href="#强制-类的继承方案-实现时需要修正-constructor。" aria-label="Permalink to &quot;[强制] 类的继承方案，实现时需要修正 `constructor`。&quot;">​</a></h5><h5 id="建议-声明类时-保证-constructor-的正确性。" tabindex="-1">[建议] 声明类时，保证 <code>constructor</code> 的正确性。 <a class="header-anchor" href="#建议-声明类时-保证-constructor-的正确性。" aria-label="Permalink to &quot;[建议] 声明类时，保证 `constructor` 的正确性。&quot;">​</a></h5><h5 id="建议-属性在构造函数中声明-方法在原型中声明。" tabindex="-1">[建议] 属性在构造函数中声明，方法在原型中声明。 <a class="header-anchor" href="#建议-属性在构造函数中声明-方法在原型中声明。" aria-label="Permalink to &quot;[建议] 属性在构造函数中声明，方法在原型中声明。&quot;">​</a></h5><h5 id="强制-自定义事件的-事件名-必须全小写。" tabindex="-1">[强制] 自定义事件的 <code>事件名</code> 必须全小写。 <a class="header-anchor" href="#强制-自定义事件的-事件名-必须全小写。" aria-label="Permalink to &quot;[强制] 自定义事件的 `事件名` 必须全小写。&quot;">​</a></h5><h5 id="强制-自定义事件只能有一个-event-参数。如果事件需要传递较多信息-应仔细设计事件对象。" tabindex="-1">[强制] 自定义事件只能有一个 <code>event</code> 参数。如果事件需要传递较多信息，应仔细设计事件对象。 <a class="header-anchor" href="#强制-自定义事件只能有一个-event-参数。如果事件需要传递较多信息-应仔细设计事件对象。" aria-label="Permalink to &quot;[强制] 自定义事件只能有一个 `event` 参数。如果事件需要传递较多信息，应仔细设计事件对象。&quot;">​</a></h5><h5 id="建议-设计自定义事件时-应考虑禁止默认行为。" tabindex="-1">[建议] 设计自定义事件时，应考虑禁止默认行为。 <a class="header-anchor" href="#建议-设计自定义事件时-应考虑禁止默认行为。" aria-label="Permalink to &quot;[建议] 设计自定义事件时，应考虑禁止默认行为。&quot;">​</a></h5><h2 id="_10-动态特性" tabindex="-1">10. 动态特性 <a class="header-anchor" href="#_10-动态特性" aria-label="Permalink to &quot;10. 动态特性&quot;">​</a></h2><h3 id="_10-1-eval" tabindex="-1">10.1 eval <a class="header-anchor" href="#_10-1-eval" aria-label="Permalink to &quot;10.1 eval&quot;">​</a></h3><h5 id="强制-避免使用直接-eval-函数。" tabindex="-1">[强制] 避免使用直接 <code>eval</code> 函数。 <a class="header-anchor" href="#强制-避免使用直接-eval-函数。" aria-label="Permalink to &quot;[强制] 避免使用直接 `eval` 函数。&quot;">​</a></h5><h5 id="建议-尽量避免使用-eval-函数。" tabindex="-1">[建议] 尽量避免使用 <code>eval</code> 函数。 <a class="header-anchor" href="#建议-尽量避免使用-eval-函数。" aria-label="Permalink to &quot;[建议] 尽量避免使用 `eval` 函数。&quot;">​</a></h5><h3 id="_10-2-动态执行代码" tabindex="-1">10.2 动态执行代码 <a class="header-anchor" href="#_10-2-动态执行代码" aria-label="Permalink to &quot;10.2 动态执行代码&quot;">​</a></h3><h5 id="建议-使用-new-function-执行动态代码。" tabindex="-1">[建议] 使用 <code>new Function</code> 执行动态代码。 <a class="header-anchor" href="#建议-使用-new-function-执行动态代码。" aria-label="Permalink to &quot;[建议] 使用 `new Function` 执行动态代码。&quot;">​</a></h5><h3 id="_10-3-with" tabindex="-1">10.3 with <a class="header-anchor" href="#_10-3-with" aria-label="Permalink to &quot;10.3 with&quot;">​</a></h3><h5 id="建议-尽量不要使用-with。" tabindex="-1">[建议] 尽量不要使用 <code>with</code>。 <a class="header-anchor" href="#建议-尽量不要使用-with。" aria-label="Permalink to &quot;[建议] 尽量不要使用 `with`。&quot;">​</a></h5><h3 id="_10-4-delete" tabindex="-1">10.4 delete <a class="header-anchor" href="#_10-4-delete" aria-label="Permalink to &quot;10.4 delete&quot;">​</a></h3><h5 id="建议-减少-delete-的使用。" tabindex="-1">[建议] 减少 <code>delete</code> 的使用。 <a class="header-anchor" href="#建议-减少-delete-的使用。" aria-label="Permalink to &quot;[建议] 减少 `delete` 的使用。&quot;">​</a></h5><h5 id="建议-处理-delete-可能产生的异常。" tabindex="-1">[建议] 处理 <code>delete</code> 可能产生的异常。 <a class="header-anchor" href="#建议-处理-delete-可能产生的异常。" aria-label="Permalink to &quot;[建议] 处理 `delete` 可能产生的异常。&quot;">​</a></h5><h3 id="_10-5-对象属性" tabindex="-1">10.5 对象属性 <a class="header-anchor" href="#_10-5-对象属性" aria-label="Permalink to &quot;10.5 对象属性&quot;">​</a></h3><h5 id="建议-避免修改外部传入的对象。" tabindex="-1">[建议] 避免修改外部传入的对象。 <a class="header-anchor" href="#建议-避免修改外部传入的对象。" aria-label="Permalink to &quot;[建议] 避免修改外部传入的对象。&quot;">​</a></h5><h5 id="建议-具备强类型的设计。" tabindex="-1">[建议] 具备强类型的设计。 <a class="header-anchor" href="#建议-具备强类型的设计。" aria-label="Permalink to &quot;[建议] 具备强类型的设计。&quot;">​</a></h5><h2 id="_11-浏览器环境" tabindex="-1">11. 浏览器环境 <a class="header-anchor" href="#_11-浏览器环境" aria-label="Permalink to &quot;11. 浏览器环境&quot;">​</a></h2><h3 id="_11-1-模块化" tabindex="-1">11.1 模块化 <a class="header-anchor" href="#_11-1-模块化" aria-label="Permalink to &quot;11.1 模块化&quot;">​</a></h3><h4 id="_11-1-1-amd" tabindex="-1">11.1.1 AMD <a class="header-anchor" href="#_11-1-1-amd" aria-label="Permalink to &quot;11.1.1 AMD&quot;">​</a></h4><h5 id="强制-使用-amd-作为模块定义。" tabindex="-1">[强制] 使用 <code>AMD</code> 作为模块定义。 <a class="header-anchor" href="#强制-使用-amd-作为模块定义。" aria-label="Permalink to &quot;[强制] 使用 `AMD` 作为模块定义。&quot;">​</a></h5><h5 id="强制-模块-id-必须符合标准。" tabindex="-1">[强制] 模块 <code>id</code> 必须符合标准。 <a class="header-anchor" href="#强制-模块-id-必须符合标准。" aria-label="Permalink to &quot;[强制] 模块 `id` 必须符合标准。&quot;">​</a></h5><h4 id="_11-1-2-define" tabindex="-1">11.1.2 define <a class="header-anchor" href="#_11-1-2-define" aria-label="Permalink to &quot;11.1.2 define&quot;">​</a></h4><h5 id="建议-定义模块时不要指明-id-和-dependencies。" tabindex="-1">[建议] 定义模块时不要指明 <code>id</code> 和 <code>dependencies</code>。 <a class="header-anchor" href="#建议-定义模块时不要指明-id-和-dependencies。" aria-label="Permalink to &quot;[建议] 定义模块时不要指明 `id` 和 `dependencies`。&quot;">​</a></h5><h5 id="建议-使用-return-来返回模块定义。" tabindex="-1">[建议] 使用 <code>return</code> 来返回模块定义。 <a class="header-anchor" href="#建议-使用-return-来返回模块定义。" aria-label="Permalink to &quot;[建议] 使用 `return` 来返回模块定义。&quot;">​</a></h5><h4 id="_11-1-3-require" tabindex="-1">11.1.3 require <a class="header-anchor" href="#_11-1-3-require" aria-label="Permalink to &quot;11.1.3 require&quot;">​</a></h4><h5 id="强制-全局运行环境中-require-必须以-async-require-形式调用。" tabindex="-1">[强制] 全局运行环境中，<code>require</code> 必须以 <code>async require</code> 形式调用。 <a class="header-anchor" href="#强制-全局运行环境中-require-必须以-async-require-形式调用。" aria-label="Permalink to &quot;[强制] 全局运行环境中，`require` 必须以 `async require` 形式调用。&quot;">​</a></h5><h5 id="强制-模块定义中只允许使用-local-require-不允许使用-global-require。" tabindex="-1">[强制] 模块定义中只允许使用 <code>local require</code>，不允许使用 <code>global require</code>。 <a class="header-anchor" href="#强制-模块定义中只允许使用-local-require-不允许使用-global-require。" aria-label="Permalink to &quot;[强制] 模块定义中只允许使用 `local require`，不允许使用 `global require`。&quot;">​</a></h5><h5 id="强制-package在实现时-内部模块的-require-必须使用-relative-id。" tabindex="-1">[强制] Package在实现时，内部模块的 <code>require</code> 必须使用 <code>relative id</code>。 <a class="header-anchor" href="#强制-package在实现时-内部模块的-require-必须使用-relative-id。" aria-label="Permalink to &quot;[强制] Package在实现时，内部模块的 `require` 必须使用 `relative id`。&quot;">​</a></h5><h5 id="建议-不会被调用的依赖模块-在-factory-开始处统一-require。" tabindex="-1">[建议] 不会被调用的依赖模块，在 <code>factory</code> 开始处统一 <code>require</code>。 <a class="header-anchor" href="#建议-不会被调用的依赖模块-在-factory-开始处统一-require。" aria-label="Permalink to &quot;[建议] 不会被调用的依赖模块，在 `factory` 开始处统一 `require`。&quot;">​</a></h5><h3 id="_11-2-dom" tabindex="-1">11.2 DOM <a class="header-anchor" href="#_11-2-dom" aria-label="Permalink to &quot;11.2 DOM&quot;">​</a></h3><h4 id="_11-2-1-元素获取" tabindex="-1">11.2.1 元素获取 <a class="header-anchor" href="#_11-2-1-元素获取" aria-label="Permalink to &quot;11.2.1 元素获取&quot;">​</a></h4><h5 id="建议-对于单个元素-尽可能使用-document-getelementbyid-获取-避免使用document-all。" tabindex="-1">[建议] 对于单个元素，尽可能使用 <code>document.getElementById</code> 获取，避免使用<code>document.all</code>。 <a class="header-anchor" href="#建议-对于单个元素-尽可能使用-document-getelementbyid-获取-避免使用document-all。" aria-label="Permalink to &quot;[建议] 对于单个元素，尽可能使用 `document.getElementById` 获取，避免使用`document.all`。&quot;">​</a></h5><h5 id="建议-对于多个元素的集合-尽可能使用-context-getelementsbytagname-获取。" tabindex="-1">[建议] 对于多个元素的集合，尽可能使用 <code>context.getElementsByTagName</code> 获取。 <a class="header-anchor" href="#建议-对于多个元素的集合-尽可能使用-context-getelementsbytagname-获取。" aria-label="Permalink to &quot;[建议] 对于多个元素的集合，尽可能使用 `context.getElementsByTagName` 获取。&quot;">​</a></h5><h5 id="建议-遍历元素集合时-尽量缓存集合长度。如需多次操作同一集合-则应将集合转为数组。" tabindex="-1">[建议] 遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。 <a class="header-anchor" href="#建议-遍历元素集合时-尽量缓存集合长度。如需多次操作同一集合-则应将集合转为数组。" aria-label="Permalink to &quot;[建议] 遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。&quot;">​</a></h5><h5 id="建议-获取元素的直接子元素时使用-children。避免使用childnodes。" tabindex="-1">[建议] 获取元素的直接子元素时使用 <code>children</code>。避免使用<code>childNodes</code>。 <a class="header-anchor" href="#建议-获取元素的直接子元素时使用-children。避免使用childnodes。" aria-label="Permalink to &quot;[建议] 获取元素的直接子元素时使用 `children`。避免使用`childNodes`。&quot;">​</a></h5><h4 id="_11-2-2-样式获取" tabindex="-1">11.2.2 样式获取 <a class="header-anchor" href="#_11-2-2-样式获取" aria-label="Permalink to &quot;11.2.2 样式获取&quot;">​</a></h4><h5 id="建议-获取元素实际样式信息时-应使用-getcomputedstyle-或-currentstyle。" tabindex="-1">[建议] 获取元素实际样式信息时，应使用 <code>getComputedStyle</code> 或 <code>currentStyle</code>。 <a class="header-anchor" href="#建议-获取元素实际样式信息时-应使用-getcomputedstyle-或-currentstyle。" aria-label="Permalink to &quot;[建议] 获取元素实际样式信息时，应使用 `getComputedStyle` 或 `currentStyle`。&quot;">​</a></h5><h4 id="_11-2-3-样式设置" tabindex="-1">11.2.3 样式设置 <a class="header-anchor" href="#_11-2-3-样式设置" aria-label="Permalink to &quot;11.2.3 样式设置&quot;">​</a></h4><h5 id="建议-尽可能通过为元素添加预定义的-classname-来改变元素样式-避免直接操作-style-设置。" tabindex="-1">[建议] 尽可能通过为元素添加预定义的 className 来改变元素样式，避免直接操作 style 设置。 <a class="header-anchor" href="#建议-尽可能通过为元素添加预定义的-classname-来改变元素样式-避免直接操作-style-设置。" aria-label="Permalink to &quot;[建议] 尽可能通过为元素添加预定义的 className 来改变元素样式，避免直接操作 style 设置。&quot;">​</a></h5><h5 id="强制-通过-style-对象设置元素样式时-对于带单位非-0-值的属性-不允许省略单位。" tabindex="-1">[强制] 通过 style 对象设置元素样式时，对于带单位非 0 值的属性，不允许省略单位。 <a class="header-anchor" href="#强制-通过-style-对象设置元素样式时-对于带单位非-0-值的属性-不允许省略单位。" aria-label="Permalink to &quot;[强制] 通过 style 对象设置元素样式时，对于带单位非 0 值的属性，不允许省略单位。&quot;">​</a></h5><h4 id="_11-2-4-dom-操作" tabindex="-1">11.2.4 DOM 操作 <a class="header-anchor" href="#_11-2-4-dom-操作" aria-label="Permalink to &quot;11.2.4 DOM 操作&quot;">​</a></h4><h5 id="建议-操作-dom-时-尽量减少页面-reflow。" tabindex="-1">[建议] 操作 <code>DOM</code> 时，尽量减少页面 <code>reflow</code>。 <a class="header-anchor" href="#建议-操作-dom-时-尽量减少页面-reflow。" aria-label="Permalink to &quot;[建议] 操作 `DOM` 时，尽量减少页面 `reflow`。&quot;">​</a></h5><h5 id="建议-尽量减少-dom-操作。" tabindex="-1">[建议] 尽量减少 <code>DOM</code> 操作。 <a class="header-anchor" href="#建议-尽量减少-dom-操作。" aria-label="Permalink to &quot;[建议] 尽量减少 `DOM` 操作。&quot;">​</a></h5><h4 id="_11-2-5-dom-事件" tabindex="-1">11.2.5 DOM 事件 <a class="header-anchor" href="#_11-2-5-dom-事件" aria-label="Permalink to &quot;11.2.5 DOM 事件&quot;">​</a></h4><h5 id="建议-优先使用-addeventlistener-attachevent-绑定事件-避免直接在-html-属性中或-dom-的-expando-属性绑定事件处理。" tabindex="-1">[建议] 优先使用 <code>addEventListener / attachEvent</code> 绑定事件，避免直接在 HTML 属性中或 DOM 的 <code>expando</code> 属性绑定事件处理。 <a class="header-anchor" href="#建议-优先使用-addeventlistener-attachevent-绑定事件-避免直接在-html-属性中或-dom-的-expando-属性绑定事件处理。" aria-label="Permalink to &quot;[建议] 优先使用 `addEventListener / attachEvent` 绑定事件，避免直接在 HTML 属性中或 DOM 的 `expando` 属性绑定事件处理。&quot;">​</a></h5><h5 id="建议-使用-addeventlistener-时第三个参数使用-false。" tabindex="-1">[建议] 使用 <code>addEventListener</code> 时第三个参数使用 <code>false</code>。 <a class="header-anchor" href="#建议-使用-addeventlistener-时第三个参数使用-false。" aria-label="Permalink to &quot;[建议] 使用 `addEventListener` 时第三个参数使用 `false`。&quot;">​</a></h5><h5 id="建议-在没有事件自动管理的框架支持下-应持有监听器函数的引用-在适当时候-元素释放、页面卸载等-移除添加的监听器。" tabindex="-1">[建议] 在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。 <a class="header-anchor" href="#建议-在没有事件自动管理的框架支持下-应持有监听器函数的引用-在适当时候-元素释放、页面卸载等-移除添加的监听器。" aria-label="Permalink to &quot;[建议] 在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。&quot;">​</a></h5>',106),i=[d];function l(h,n,c,s,u,q){return o(),a("div",null,i)}const f=e(t,[["render",l]]);export{m as __pageData,f as default};
